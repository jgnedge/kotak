{
	"name": "copy_data_from_master_for_download_file_test",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ufce_download_intermediate",
						"type": "DatasetReference"
					},
					"name": "UfceMasterSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ufce_download",
						"type": "DatasetReference"
					},
					"name": "UfceDownloaded"
				}
			],
			"transformations": [
				{
					"name": "FilterData"
				},
				{
					"name": "DeriveColumn"
				},
				{
					"name": "selectColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     year as string,",
				"     quarter as string,",
				"     file_creation_time as string,",
				"     division as string",
				"}",
				"source(output(",
				"          workflow_id as long,",
				"          crn as string,",
				"          lob as string,",
				"          segment as string,",
				"          year as integer,",
				"          quarter as string,",
				"          yq as string,",
				"          cp_id as string,",
				"          borrower_name as string,",
				"          division as string,",
				"          location as string,",
				"          region as string,",
				"          zone as string,",
				"          credit_analyst as string,",
				"          rm as string,",
				"          applicability_status as string,",
				"          reason_not_appli as string,",
				"          certificate_type as string,",
				"          self_cert_expected as boolean,",
				"          domestic_cert_expected as boolean,",
				"          auditor_cert_expected as boolean,",
				"          auditor_cert_due_date as string,",
				"          ebid as string,",
				"          ebid_type as string,",
				"          total_fb_os_rel_provision as double,",
				"          pan_india_os as double,",
				"          total_fb_os as double,",
				"          total_non_fb_os as double,",
				"          data_status as string,",
				"          currency as string,",
				"          fx_payables_os as string,",
				"          fx_loan_os as string,",
				"          fx_receivables_os as string,",
				"          hed_amt_pay_loan_liab as string,",
				"          hed_amt_receivables as string,",
				"          net_fce_sl_pos as double,",
				"          net_ufce_sl_pos as double,",
				"          ratio_net_unhed as double,",
				"          likely_loss as double,",
				"          ebid_considered as string,",
				"          ebid_source as string,",
				"          ratio_ll_ebid_con as double,",
				"          risk_category as string,",
				"          ufce_source as string,",
				"          remarks as string,",
				"          is_kmbl_lead_bk as string,",
				"          is_limit_with_bk_sys as string,",
				"          ufce_maturing_5yr as double,",
				"          provision_applicable as double,",
				"          provision_indicator as double,",
				"          provision_amount as double,",
				"          crilic_exp as string,",
				"          glems_exp as string,",
				"          kmbl_sys_fund_os as double,",
				"          kmbl_sys_nonfund_os as double,",
				"          final_os_for_prov as double,",
				"          cms as double,",
				"          mtm_os as double,",
				"          bullion_os as double,",
				"          lcbd as double,",
				"          sblc as double,",
				"          odfd as double,",
				"          gift_city as string,",
				"          asm as string,",
				"          tsm as string,",
				"          acm as string,",
				"          is_cases_checked as boolean,",
				"          final_provision_perct as double,",
				"          final_provision_amt as double,",
				"          status as string,",
				"          assigned_to as string,",
				"          comment as string,",
				"          auditor_cert_period as string,",
				"          approach as string,",
				"          nature_of_business as string,",
				"          approach_change_approval as string,",
				"          ebid_date as string,",
				"          auditor_cert_received as string,",
				"          state as string,",
				"          final_bk_sys_limit_gr25 as boolean,",
				"          assigned_on as string,",
				"          provision_applicable_self_cert as double,",
				"          provision_applicable_bk_limit_rate as double,",
				"          borrower_email as string,",
				"          penalty_bucket as double,",
				"          penalty_amount as double,",
				"          balance_sheet_disclosure_expected as boolean,",
				"          total_penalty as double,",
				"          difference as double,",
				"          srm as string,",
				"          cm as string,",
				"          bh as string,",
				"          {extra-column-1} as string,",
				"          {extra-column-2} as string,",
				"          {extra-column-3} as string,",
				"          ciib_comments as string,",
				"          ca_comments as string,",
				"          cmt_comments as string,",
				"          is_deleted as boolean,",
				"          cmt_checker_comments as string,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> UfceMasterSource",
				"UfceMasterSource filter(division == $division && toString(year) == $year && quarter == $quarter) ~> FilterData",
				"FilterData derive(crn = toString(toDecimal(crn, 38, 0)),",
				"          cp_id = toString(toDecimal(cp_id, 38, 0)),",
				"          fx_payables_os = iif(fx_payables_os == '0' || fx_payables_os == '0.0' || fx_payables_os == '0.00' || fx_payables_os == '0.000', toString(fx_payables_os), iif(isDecimal(fx_payables_os) == true(), toString(toDecimal(fx_payables_os, 38, 20)), toString(fx_payables_os))),",
				"          fx_loan_os = iif(fx_loan_os == '0' || fx_loan_os == '0.0' || fx_loan_os == '0.00' || fx_loan_os == '0.000', toString(fx_loan_os), iif(isDecimal(fx_loan_os) == true(), toString(toDecimal(fx_loan_os, 38, 20)), toString(fx_loan_os))),",
				"          fx_receivables_os = iif(fx_receivables_os == '0'|| fx_receivables_os == '0.0' || fx_receivables_os == '0.00' || fx_receivables_os == '0.000', toString(fx_receivables_os), iif(isDecimal(fx_receivables_os) == true(), toString(toDecimal(fx_receivables_os, 38, 20)), toString(fx_receivables_os))),",
				"          hed_amt_pay_loan_liab = iif(hed_amt_pay_loan_liab == '0' || hed_amt_pay_loan_liab == '0.0' || hed_amt_pay_loan_liab == '0.00' || hed_amt_pay_loan_liab == '0.000', toString(hed_amt_pay_loan_liab), iif(isDecimal(hed_amt_pay_loan_liab) == true(), toString(toDecimal(hed_amt_pay_loan_liab, 38, 20)), toString(hed_amt_pay_loan_liab))),",
				"          hed_amt_receivables = iif(hed_amt_receivables == '0' || hed_amt_receivables == '0.0' || hed_amt_receivables == '0.00' || hed_amt_receivables == '0.000', toString(hed_amt_receivables), iif(isDecimal(hed_amt_receivables) == true(), toString(toDecimal(hed_amt_receivables, 38, 20)), toString(hed_amt_receivables))),",
				"          net_fce_sl_pos = iif(net_fce_sl_pos == 0 || net_fce_sl_pos == 0.0 || net_fce_sl_pos == 0.00 || net_fce_sl_pos == 0.000, toString(net_fce_sl_pos), iif(isDouble(toString(net_fce_sl_pos)) == true(), toString(toDecimal(net_fce_sl_pos, 38, 20)), toString(net_fce_sl_pos))),",
				"          net_ufce_sl_pos = iif(net_ufce_sl_pos == 0 || net_ufce_sl_pos == 0.0 || net_ufce_sl_pos == 0.00 || net_ufce_sl_pos == 0.000, toString(net_ufce_sl_pos), iif(isDouble(toString(net_ufce_sl_pos)) == true(), toString(toDecimal(net_ufce_sl_pos, 38, 20)), toString(net_ufce_sl_pos))),",
				"          ratio_net_unhed = iif(ratio_net_unhed == 0 || ratio_net_unhed == 0.0 || ratio_net_unhed == 0.00 || ratio_net_unhed == 0.000, toString(ratio_net_unhed), iif(isDouble(toString(ratio_net_unhed)) == true(), toString(toDecimal(ratio_net_unhed, 38, 20)), toString(ratio_net_unhed))),",
				"          ufce_maturing_5yr = iif(ufce_maturing_5yr == 0 || ufce_maturing_5yr == 0.0 || ufce_maturing_5yr == 0.00 || ufce_maturing_5yr == 0.000, toString(ufce_maturing_5yr), iif(isDouble(toString(ufce_maturing_5yr)) == true(), toString(toDecimal(ufce_maturing_5yr, 38, 20)), toString(ufce_maturing_5yr))),",
				"          likely_loss = iif(likely_loss == 0 || likely_loss == 0.0 || likely_loss == 0.00 || likely_loss == 0.000, toString(likely_loss), iif(isDouble(toString(likely_loss)) == true(), toString(toDecimal(likely_loss, 38, 20)), toString(likely_loss))),",
				"          ebid_considered = iif(ebid_considered == '0' || ebid_considered == '0.0' || ebid_considered == '0.00' || ebid_considered == '0.000', toString(ebid_considered), iif(isDecimal(ebid_considered) == true(), toString(toDecimal(ebid_considered, 38, 20)), toString(ebid_considered))),",
				"          ratio_ll_ebid_con = iif(ratio_ll_ebid_con == 0 || ratio_ll_ebid_con == 0.0 || ratio_ll_ebid_con == 0.00 || ratio_ll_ebid_con == 0.000, toString(ratio_ll_ebid_con), iif(isDouble(toString(ratio_ll_ebid_con)) == true(), toString(toDecimal(ratio_ll_ebid_con, 38, 20)), toString(ratio_ll_ebid_con))),",
				"          crilic_exp = iif(crilic_exp == '0' || crilic_exp == '0.0' || crilic_exp == '0.00' || crilic_exp == '0.000', toString(crilic_exp), iif(isDecimal(crilic_exp) == true(), toString(toDecimal(crilic_exp, 38, 20)), toString(crilic_exp))),",
				"          is_limit_with_bk_sys = iif(lower(trim(is_limit_with_bk_sys)) == 'true' || lower(trim(is_limit_with_bk_sys)) == 'yes', 'Yes',iif(lower(trim(is_limit_with_bk_sys)) == 'false' || lower(trim(is_limit_with_bk_sys)) == 'no', 'No',toString(is_limit_with_bk_sys))),",
				"          glems_exp = iif(glems_exp == '0' || glems_exp == '0.0' || glems_exp == '0.00' || glems_exp == '0.000', toString(glems_exp), iif(isDecimal(glems_exp) == true(), toString(toDecimal(glems_exp, 38, 20)), toString(glems_exp))),",
				"          final_bk_sys_limit_gr25 = iif(final_bk_sys_limit_gr25 == true(), 'Yes', iif(final_bk_sys_limit_gr25 == false(), 'No', toString(final_bk_sys_limit_gr25))),",
				"          provision_applicable_self_cert = iif(provision_applicable_self_cert == 0 || provision_applicable_self_cert == 0.0 || provision_applicable_self_cert == 0.00 || provision_applicable_self_cert == 0.000, toString(provision_applicable_self_cert), iif(isDouble(toString(provision_applicable_self_cert)) == true(), toString(toDecimal(provision_applicable_self_cert, 38, 20)), toString(provision_applicable_self_cert))),",
				"          provision_indicator = iif(provision_indicator == 0 || provision_indicator == 0.0 || provision_indicator == 0.00 || provision_indicator == 0.000, toString(provision_indicator), iif(isDouble(toString(provision_indicator)) == true(), toString(toDecimal(provision_indicator, 38, 20)), toString(provision_indicator))),",
				"          provision_applicable_bk_limit_rate = iif(provision_applicable_bk_limit_rate == 0 || provision_applicable_bk_limit_rate == 0.0 || provision_applicable_bk_limit_rate == 0.00 || provision_applicable_bk_limit_rate == 0.000, toString(provision_applicable_bk_limit_rate), iif(isDouble(toString(provision_applicable_bk_limit_rate)) == true(), toString(toDecimal(provision_applicable_bk_limit_rate, 38, 20)), toString(provision_applicable_bk_limit_rate))),",
				"          difference = iif(difference == 0 || difference == 0.0 || difference == 0.00 || difference == 0.000, toString(difference), iif(isDouble(toString(difference)) == true(), toString(toDecimal(difference, 38, 20)), toString(difference))),",
				"          provision_applicable = iif(provision_applicable == 0 || provision_applicable == 0.0 || provision_applicable == 0.00 || provision_applicable == 0.000, toString(provision_applicable), iif(isDouble(toString(provision_applicable)) == true(), toString(toDecimal(provision_applicable, 38, 20)), toString(provision_applicable))),",
				"          final_os_for_prov = iif(final_os_for_prov == 0 || final_os_for_prov == 0.0 || final_os_for_prov == 0.00 || final_os_for_prov == 0.000, toString(final_os_for_prov), iif(isDouble(toString(final_os_for_prov)) == true(), toString(toDecimal(final_os_for_prov, 38, 20)), toString(final_os_for_prov))),",
				"          provision_amount = iif(provision_amount == 0 || provision_amount == 0.0 || provision_amount == 0.00 || provision_amount == 0.000, toString(provision_amount), iif(isDouble(toString(provision_amount)) == true(), toString(toDecimal(provision_amount, 38, 20)), toString(provision_amount))),",
				"          kmbl_sys_fund_os = iif(kmbl_sys_fund_os == 0 || kmbl_sys_fund_os == 0.0 || kmbl_sys_fund_os == 0.00 || kmbl_sys_fund_os == 0.000, toString(kmbl_sys_fund_os), iif(isDouble(toString(kmbl_sys_fund_os)) == true(), toString(toDecimal(kmbl_sys_fund_os, 38, 20)), toString(kmbl_sys_fund_os))),",
				"          kmbl_sys_nonfund_os = iif(kmbl_sys_nonfund_os == 0 || kmbl_sys_nonfund_os == 0.0 || kmbl_sys_nonfund_os == 0.00|| kmbl_sys_nonfund_os == 0.000, toString(kmbl_sys_nonfund_os), iif(isDouble(toString(kmbl_sys_nonfund_os)) == true(), toString(toDecimal(kmbl_sys_nonfund_os, 38, 20)), toString(kmbl_sys_nonfund_os))),",
				"          gift_city = iif(gift_city == '0' || gift_city == '0.0' || gift_city == '0.00' || gift_city == '0.000', toString(gift_city) , iif(isDecimal(gift_city) == true(), toString(toDecimal(gift_city, 38, 20)), toString(gift_city)))) ~> DeriveColumn",
				"DeriveColumn select(mapColumn(",
				"          {For the Year and Quarter} = yq,",
				"          LOB = lob,",
				"          Division = division,",
				"          Segment = segment,",
				"          {KMBL CRN} = crn,",
				"          {KMBL GLEMS CP Id} = cp_id,",
				"          {Name of Borrower} = borrower_name,",
				"          {Nature of Business} = nature_of_business,",
				"          {Applicability status} = applicability_status,",
				"          {Data status} = data_status,",
				"          {Standardized or Broad-based approach} = approach,",
				"          {Is approval taken for change in approach} = approach_change_approval,",
				"          {Fx payables outstanding} = fx_payables_os,",
				"          {Fx loan outstanding} = fx_loan_os,",
				"          {Fx receivables outstanding} = fx_receivables_os,",
				"          {Hedged amt. payables & loan liab.} = hed_amt_pay_loan_liab,",
				"          {Hedged amt. receivables} = hed_amt_receivables,",
				"          {Net FCE (short) / long position} = net_fce_sl_pos,",
				"          {Net UFCE (short) / long position} = net_ufce_sl_pos,",
				"          {Ratio of net unhedged} = ratio_net_unhed,",
				"          {UFCE maturing up to 5 years - positive/(negative)} = ufce_maturing_5yr,",
				"          {Likely loss value} = likely_loss,",
				"          {EBID (after tax)} = ebid_considered,",
				"          {EBID Date} = ebid_date,",
				"          {Likely loss / Considered EBID ratio} = ratio_ll_ebid_con,",
				"          {Risk category} = risk_category,",
				"          {Remarks (if any)} = remarks,",
				"          {Banking System Exposure (CRILC) (in lakhs)} = crilic_exp,",
				"          {Final Banking System Limits (>=25cr), as per CMT Team's input} = is_limit_with_bk_sys,",
				"          {Glems Exp} = glems_exp,",
				"          {Final Banking System Limits (>25cr)} = final_bk_sys_limit_gr25,",
				"          {UFCE Data source(If received) whether self- certified or auditor certified} = ufce_source,",
				"          {Auditor Certificate Received (Yes/ No/ NA)} = auditor_cert_received,",
				"          {Auditor Certificate Due Date} = auditor_cert_due_date,",
				"          {Period for which Auditor Certificate is received} = auditor_cert_period,",
				"          Comments = comment,",
				"          {Prov.% Applicable- Basis Self Certificate} = provision_applicable_self_cert,",
				"          {Prov. Indicator } = provision_indicator,",
				"          {Prov.% Applicable-  As per the LATEST banking limit rate (for CA Certificate)} = provision_applicable_bk_limit_rate,",
				"          Difference = difference,",
				"          {Final Prov %} = provision_applicable,",
				"          {Final OS for provision computation} = final_os_for_prov,",
				"          {Final Provision Amt} = provision_amount,",
				"          {KMBL system fund O/s} = kmbl_sys_fund_os,",
				"          {KMBL system Non fund O/s} = kmbl_sys_nonfund_os,",
				"          {Gift city} = gift_city,",
				"          Zone = zone,",
				"          State = state,",
				"          Location = location,",
				"          {Credit Analyst / Credit Manager} = credit_analyst,",
				"          ASM = asm,",
				"          TSM = tsm,",
				"          RM = rm,",
				"          ACM = acm,",
				"          {Extra Column 1} = {extra-column-1},",
				"          {Extra Column 2} = {extra-column-2},",
				"          {Extra Column 3} = {extra-column-3}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumn",
				"selectColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat($division, '_', $year, '_', $quarter, '_', $file_creation_time, '.csv'))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     partitionBy('hash', 1)) ~> UfceDownloaded"
			]
		}
	}
}