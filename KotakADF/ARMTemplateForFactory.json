{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "KotakADF"
		},
		"AzureBlobStorage_ufce_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_ufce'"
		},
		"AzureBlobStoragenew111_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStoragenew111'"
		},
		"AzureDataLakeStorage_ufce_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_ufce'"
		},
		"AzurePostgreSql_ufce_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzurePostgreSql_ufce'"
		},
		"CadenceSynapseLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CadenceSynapseLS'"
		},
		"CosmosDbMongoDbEntityStore_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbMongoDbEntityStore'"
		},
		"CosmosDbMongoDbEntityStore_account": {
			"type": "secureString",
			"metadata": "Secure string for 'account' of 'CosmosDbMongoDbEntityStore'",
			"defaultValue": "kmblewskotak"
		},
		"CosmosDbMongoDbFeedBackProfile_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbMongoDbFeedBackProfile'"
		},
		"CosmosDbMongoDbFeedBackProfile_account": {
			"type": "secureString",
			"metadata": "Secure string for 'account' of 'CosmosDbMongoDbFeedBackProfile'",
			"defaultValue": "kmblewskotak"
		},
		"CosmosDbMongoDbLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbMongoDbLS'"
		},
		"CosmosDbMongoDbLS_account": {
			"type": "secureString",
			"metadata": "Secure string for 'account' of 'CosmosDbMongoDbLS'",
			"defaultValue": "kmblewskotak"
		},
		"SybaseLS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SybaseLS'"
		},
		"TestLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TestLinkedService'"
		},
		"cadenceAdlsLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'cadenceAdlsLS'"
		},
		"cadenceProcessingLS_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'cadenceProcessingLS'"
		},
		"ewscadenceLS_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'ewscadenceLS'"
		},
		"ufce_prod_fa_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'ufce_prod_fa'"
		},
		"AzureBlobStorageLS_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://kmblewsproddatalake.blob.core.windows.net"
		},
		"AzureDataLakeStorage_ufce_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsufceprod.dfs.core.windows.net/"
		},
		"CosmosDbMongoDbEntityStore_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "entity_store"
		},
		"CosmosDbMongoDbFeedBackProfile_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "profile_store"
		},
		"CosmosDbMongoDbLS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "config_store"
		},
		"SybaseLS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "10.240.55.130:2639"
		},
		"SybaseLS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "KDWPROD_R2"
		},
		"SybaseLS_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "KDW_EWS"
		},
		"SybaseToAdls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://kmblewsproddatalake.dfs.core.windows.net/"
		},
		"cadenceAdlsLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://kmblewsproddatalake.dfs.core.windows.net"
		},
		"ewscadenceLS_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://kmb-ews-prod-functionapp.azurewebsites.net"
		},
		"ufce_prod_fa_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://func-ufce-prod.azurewebsites.net"
		},
		"AzureBlobStorage868_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e5dc7d76-2142-4b3a-896e-fd86f66d51d8/resourceGroups/RG-UFCE-PROD/providers/Microsoft.Storage/storageAccounts/dlsufceprod"
		},
		"AzureBlobStorage868_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureDataLakeStorage252_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e5dc7d76-2142-4b3a-896e-fd86f66d51d8/resourceGroups/RG-UFCE-PROD/providers/Microsoft.Storage/storageAccounts/dlsufceprod"
		},
		"AzureDataLakeStorage252_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"AzureFunction541_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e5dc7d76-2142-4b3a-896e-fd86f66d51d8/resourceGroups/RG-UFCE-PROD/providers/Microsoft.Web/sites/FUNC-UFCE-PROD"
		},
		"AzureFunction541_properties_groupId": {
			"type": "string",
			"defaultValue": "sites"
		},
		"AzurePostgreSql860_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e5dc7d76-2142-4b3a-896e-fd86f66d51d8/resourceGroups/RG-UFCE-PROD/providers/Microsoft.DBforPostgreSQL/servers/psql-ufce-prod"
		},
		"AzurePostgreSql860_properties_groupId": {
			"type": "string",
			"defaultValue": "postgresqlServer"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Brd2TransactionMining')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Brd2Uc2",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SetClusterVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetNodeType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetWorker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD2/brd2_uc5",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd2Uc5",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd2Uc2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD2/brd2_uc5",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetWorker",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workers",
							"value": {
								"value": "@{int(json(activity('GetConfig').output.config).job_capacity_details.workers)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetNodeType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "nodeType",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.nodeType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetClusterVersion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "clusterVersion",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.clusterVersion}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToSynapse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Brd2Uc5",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd2Uc2",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd2Uc6",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd2Uc1_Uc3",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd2Uc4",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc6",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd2Uc5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD2/brd2_uc6",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadToSynapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Brd2Uc4",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckBrd2EntityStore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd2Uc1_Uc3",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd2Uc6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD2/brd2_uc1_uc3",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd2Uc4",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd2Uc1_Uc3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD2/brd2_uc4",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "brd2_mining_output"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"variables": {
					"nodeType": {
						"type": "String",
						"defaultValue": "Standard_DSS_v2"
					},
					"workers": {
						"type": "String",
						"defaultValue": "3"
					},
					"clusterVersion": {
						"type": "String",
						"defaultValue": "8.1.x-scala2.12"
					},
					"configFile": {
						"type": "String",
						"defaultValue": "/dbfs/FileStore/configs/trigger_config_details.json"
					},
					"commonFilter": {
						"type": "String",
						"defaultValue": "/dbfs/FileStore/configs/global_filter_config_details.json"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD2"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-09T08:25:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]",
				"[concat(variables('factoryId'), '/pipelines/CheckBrd2EntityStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Brd3TransactionMining')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Brd3Uc7",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SetClusterVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetNodeType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetWorker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc7",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd3Uc8",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc8",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetWorker",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workers",
							"value": {
								"value": "@{int(json(activity('GetConfig').output.config).job_capacity_details.workers)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetNodeType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "nodeType",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.nodeType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetClusterVersion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "clusterVersion",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.clusterVersion}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToSynapse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Brd3Uc8",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd3Uc7",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd3Uc11",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd3Uc1",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd3Uc9",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd3Uc2",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Brd3Uc3",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC4 Commercial WBG ARD",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC4 Consumer",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC5 Commercial WBG ARD",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC5 Consumer",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC6 Commercial WBG ARD",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC6 Consumer",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "BRD3 UC10 Finacle",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc11",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc11",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadToSynapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BRD3 UC10 Finacle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckBrd3EntityStore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd3Uc1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc11",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc1",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd3Uc9",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc9",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd3Uc2",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc9",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc2",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Brd3Uc3",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/brd3_uc3",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC4 Commercial WBG ARD",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Brd3Uc3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc4_consumer",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC4 Consumer",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BRD3 UC4 Commercial WBG ARD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc4_consumer",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC5 Commercial WBG ARD",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BRD3 UC4 Consumer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc5_wbg_commerial_ard",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC5 Consumer",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BRD3 UC5 Commercial WBG ARD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc5_consumer",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC6 Commercial WBG ARD",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BRD3 UC5 Consumer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc6_wbg_commerial_ard",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC6 Consumer",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BRD3 UC6 Commercial WBG ARD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc6_consumer",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BRD3 UC10 Finacle",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BRD3 UC6 Consumer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/BRD3/brd3_uc10_finacle",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							},
							"libraries": [
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/attrs-21.2.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/fuzzysearch-0.7.3-cp38-cp38-linux_x86_64.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/fuzzywuzzy-0.18.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/python_Levenshtein-0.12.2-cp38-cp38-linux_x86_64.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/rapidfuzz-1.4.1-cp38-cp38-manylinux2010_x86_64.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/setuptools-56.2.0-py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/fuzzyCheck-1.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/relatedPartyFuzzy-1.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/selfTransferFuzzy-1.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/bankingArrangementFuzzy-1.0-py2.py3-none-any.whl"
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "brd3_mining_output"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"variables": {
					"nodeType": {
						"type": "String",
						"defaultValue": "Standard_DSS_v2"
					},
					"workers": {
						"type": "String",
						"defaultValue": "3"
					},
					"clusterVersion": {
						"type": "String",
						"defaultValue": "8.1.x-scala2.12"
					},
					"configFile": {
						"type": "String",
						"defaultValue": "/dbfs/FileStore/configs/trigger_config_details.json"
					},
					"commonFilter": {
						"type": "String",
						"defaultValue": "/dbfs/FileStore/configs/global_filter_config_details.json"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T07:12:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]",
				"[concat(variables('factoryId'), '/pipelines/CheckBrd3EntityStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CadenzProfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customer_base",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "customer_base",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "master_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "facility",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "limit",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "transaction_mining_trigger_brd3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "profile",
								"jobSubjectArea": "master",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "customer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_base",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "crn_lob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "customer",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "rp_ews_input_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "rp_ews_input_table",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transaction_mining",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "borrower_customers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "borrower_vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "trn_int_trigger",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "crn_int_trigger",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "rp_union_input_table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "monthly_stock_statement",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "monthly_kram_entity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Self Transfer Feedback",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TransactionMining",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"jobSubjectArea": "txn_mining_output_table",
								"jobExecutionType": "entity",
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "customer_and_suppliers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "customer_and_suppliers",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "borrower_customers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_and_suppliers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "borrower_customers",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "borrower_vendors",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_and_suppliers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "borrower_vendors",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ews_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "transaction_mining_trigger_brd3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "profile",
								"jobSubjectArea": "ews",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "stg_finacle_gam",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "stg_finacle_gam",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "crn_int_trigger",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_base",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "crn_lob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "crn_int_trigger",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "trn_int_trigger",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_finacle_gam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "trn_int_trigger",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "rp_union_input_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "rp_ews_input_table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "borrower_customers",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "borrower_vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "rp_input_table_ui",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "rp_union_input_table",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transaction_view",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "trn_int_trigger",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "transaction",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "populateSynapseTriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "populateSynapseMiningOutput",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "populateSynapseCrnOutTriggerDetail",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "populateSynapseTrnOutTrigger",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TransactionView",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "prepare_jars_and_configs",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareJarsAndConfigs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"uat_flag": "false",
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transaction",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_finacle_gam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "transaction",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "financial_ratio",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "financial_ratio",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "facility",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_glems_mview_fac_dtls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "facility",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "limit",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_glems_mview_fac_dtls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "limit",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "stg_glems_mview_fac_dtls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "stg_glems_mview_fac_dtls",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "populateSynapseMiningOutput",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_mining_trigger_brd3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SynapseConsumptionLayerProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "txn_mining_output_table",
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "populateSynapseTriggerName",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_mining_trigger_brd3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SynapseConsumptionLayerProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "trigger_name",
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "populateSynapseCrnOutTriggerDetail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_mining_trigger_brd3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SynapseConsumptionLayerProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "crn_out_trigger_detail",
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "crn_lob",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "customer_base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "derived_entity",
								"jobSubjectArea": "crn_lob",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transaction_mining_trigger_brd2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_mining",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckPartitionValueMonthlyTrigger",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"jobSubjectArea": "brd2_mining_output",
								"jobExecutionType": "entity",
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "populateSynapseTrnOutTrigger",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_mining_trigger_brd3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SynapseConsumptionLayerProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"jobSubjectArea": "trn_out_trigger",
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "over_draft_account_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_finacle_gam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "profile",
								"jobSubjectArea": "over_draft_account",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "financial_info_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "financial_ratio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "profile",
								"jobSubjectArea": "financial_info",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "fixed_deposit_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_finacle_gam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "profile",
								"jobSubjectArea": "fixed_deposit",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "term_loan_profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stg_finacle_gam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessingAndPopulating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobExecutionType": "profile",
								"jobSubjectArea": "term_loan",
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transaction_mining_trigger_brd3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_mining_trigger_brd2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckPartitionValueBRD3Trigger",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"jobSubjectArea": "brd3_mining_output",
								"jobExecutionType": "entity",
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "transaction_info",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "transaction_view",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckMonthlyPartitionTransactionInfo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "monthly_stock_statement",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MonthlyStockStatement",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"jobExecutionType": "entity",
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "rp_input_table_ui",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RpInputFromUI",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "monthly_kram_entity",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prepare_jars_and_configs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MonthlyKramExecution",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"cosmosDatabaseName": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@variables('markerRootPath')",
									"type": "Expression"
								},
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"container": {
									"value": "@variables('container')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Self Transfer Feedback",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "self_transfer_feedback",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_date": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"markerRootPath": {
						"type": "String",
						"defaultValue": "job-metadata/markers"
					},
					"cosmosDatabaseName": {
						"type": "String",
						"defaultValue": "config_store"
					},
					"schema": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "String",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-24T10:12:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EntityProcessing')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessingAndPopulating')]",
				"[concat(variables('factoryId'), '/pipelines/TransactionMining')]",
				"[concat(variables('factoryId'), '/pipelines/TransactionView')]",
				"[concat(variables('factoryId'), '/pipelines/PrepareJarsAndConfigs')]",
				"[concat(variables('factoryId'), '/pipelines/SynapseConsumptionLayerProcessing')]",
				"[concat(variables('factoryId'), '/pipelines/CheckPartitionValueMonthlyTrigger')]",
				"[concat(variables('factoryId'), '/pipelines/CheckPartitionValueBRD3Trigger')]",
				"[concat(variables('factoryId'), '/pipelines/CheckMonthlyPartitionTransactionInfo')]",
				"[concat(variables('factoryId'), '/pipelines/MonthlyStockStatement')]",
				"[concat(variables('factoryId'), '/pipelines/RpInputFromUI')]",
				"[concat(variables('factoryId'), '/pipelines/MonthlyKramExecution')]",
				"[concat(variables('factoryId'), '/pipelines/self_transfer_feedback')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CadenzWithLOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Cadenz",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Load Consumer BL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CadenzProfile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Derived",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute HTD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Stag2landing_Masterpipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@replace(adddays(pipeline().parameters.partitionValue, 1, 'yyyy-MM-dd'), '-', '')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute LOS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_LOS_Commercial_Financial",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(adddays(pipeline().parameters.partitionValue, 1, 'yyyy-MM-dd'), '-', '')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute HTD",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute LOS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_Finacle1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@replace(adddays(pipeline().parameters.partitionValue, 1, 'yyyy-MM-dd'), '-', '')",
									"type": "Expression"
								},
								"delta": {
									"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute ReportsRefresh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Cadenz",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ReportsRefresh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Inward Cheque Return",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Load NPA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SourceDataLoadDateCheckBrd2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "OpenTriggers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute ReportsRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEwsProfilePartitionDateExist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobSubjectArea": "ews",
								"container": "job-data"
							}
						}
					},
					{
						"name": "Execute Load NPA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Derived",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SourceDataLoadMonthlyNpa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Load LC BG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Inward Cheque Return",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SourceDataLoadMonthlyLcBg",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Load Neft Rtgs",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Load LC BG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ExecuteNeftRtgs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"loadDate": {
									"value": "@adddays(pipeline().parameters.partitionValue, 1, 'yyyy-MM-dd')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Load KRAM Models",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Load Neft Rtgs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SourceDataLoadMonthlyKramModels",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Load Consumer BL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Load KRAM Models",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SourceDataLoadMonthlyConsumerBl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "HistoricalRun"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-23T07:36:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CadenzProfile')]",
				"[concat(variables('factoryId'), '/pipelines/Stag2landing_Masterpipeline')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_LOS_Commercial_Financial')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_Finacle1')]",
				"[concat(variables('factoryId'), '/pipelines/ReportsRefresh')]",
				"[concat(variables('factoryId'), '/pipelines/SourceDataLoadDateCheckBrd2')]",
				"[concat(variables('factoryId'), '/pipelines/CheckEwsProfilePartitionDateExist')]",
				"[concat(variables('factoryId'), '/pipelines/SourceDataLoadMonthlyNpa')]",
				"[concat(variables('factoryId'), '/pipelines/SourceDataLoadMonthlyLcBg')]",
				"[concat(variables('factoryId'), '/pipelines/ExecuteNeftRtgs')]",
				"[concat(variables('factoryId'), '/pipelines/SourceDataLoadMonthlyKramModels')]",
				"[concat(variables('factoryId'), '/pipelines/SourceDataLoadMonthlyConsumerBl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckBrd2EntityStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Brd2Uc6SatisfiedTriggerInfo",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "brd2_uc6_satisfied_trigger_info",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SharePrice",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "share_price_data",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "NpaData",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "npa_data",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LcBgUnion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "lc_bg_union",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionDate": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD2"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:32:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CheckEntityStorePartitionDateExistSynapseLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckBrd3EntityStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ChangeInDirector",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "change_in_director",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "AssociateCompanies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "associate_companies",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ChangeInAuditor",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "change_in_auditor",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "RaidByOfficials",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "raid_by_officials",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PromoterHoldingOutputTable",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "promoter_holding_output_table",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PromoterPledgeOutputTable",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "promoter_pledge_output_table",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PromoterHoldingOrPledgeShare",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "promoter_holding_or_pledge_share",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "AgingReceivablesTable",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "aging_receivables_table",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ReceivablesTurnoverRatio",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "receivables_turnover_ratio",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "InventoryTurnoverRatio",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "inventory_turnover_ratio",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CashEquivalentBorrowingConsumer",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "cash_equivalent_borrowing_consumer",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CashEquivalentBorrowingWBG",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "cash_equivalent_borrowing_wbg",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CurrentAssetsTurnoverConsumer",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "current_assets_turnover_consumer",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CurrentAssetsTurnoverWBG",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "current_assets_turnover_wbg",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "WorkingCapitalBorrowingConsumer",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "working_capital_borrowing_consumer",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "WorkingCapitalBorrowingWBG",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CheckEntityStorePartitionDateExistSynapseLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionDate": {
									"value": "@pipeline().parameters.partitionDate",
									"type": "Expression"
								},
								"jobSubjectArea": "working_capital_borrowing_wbg",
								"schema": {
									"value": "@pipeline().parameters.schema",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionDate": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T06:12:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CheckEntityStorePartitionDateExistSynapseLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckEntityStorePartitionDateExistSynapseLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check_partion_date_exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adls_entity_store",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@pipeline().parameters.partitionDate",
										"type": "Expression"
									},
									"entityName": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "IF_Partition_Date_Exist_Return_True_or_False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "check_partion_date_exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "partitionDateExists",
							"value": {
								"value": "@activity('check_partion_date_exists').output.exists",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if_partition_date_exists_load_synapse",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IF_Partition_Date_Exist_Return_True_or_False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('partitionDateExists')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteSynapse",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SynapseConsumptionLayerProcessing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionDate",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"schema": {
												"value": "@pipeline().parameters.schema",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionDate": {
						"type": "string",
						"defaultValue": "yyyy-MM-dd"
					},
					"jobSubjectArea": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"variables": {
					"partitionDateExists": {
						"type": "Boolean"
					},
					"partitionDateNotFound": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:31:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_entity_store')]",
				"[concat(variables('factoryId'), '/pipelines/SynapseConsumptionLayerProcessing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckEwsProfilePartitionDateExist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check_partion_date_exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "adls_profile_store",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@pipeline().parameters.partitionDate",
										"type": "Expression"
									},
									"subjectArea": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "IF_Partition_Date_Exist_Return_True_or_False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "check_partion_date_exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "partitionDateExists",
							"value": {
								"value": "@activity('check_partion_date_exists').output.exists",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if_partition_date_exists_load_synapse",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IF_Partition_Date_Exist_Return_True_or_False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('partitionDateExists')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteOpenTriggers",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "OpenTriggers",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionDate",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionDate": {
						"type": "string",
						"defaultValue": "yyyy-MM-dd"
					},
					"jobSubjectArea": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"variables": {
					"partitionDateExists": {
						"type": "Boolean"
					},
					"partitionDateNotFound": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PROD/alert_workflow"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-12T07:10:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_profile_store')]",
				"[concat(variables('factoryId'), '/pipelines/OpenTriggers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckMonthlyPartitionTransactionInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckStartofMonthTransactionInfo",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "TransactionInfo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@concat('[', pipeline().parameters.schema, '].[TRANSACTIONAL_INFO_REFRESH]')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"partition_value": {
												"value": {
													"value": "@pipeline().parameters.partitionValue",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "CadenceSynapseLS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-10-01"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckPartitionValueBRD3Trigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckStartofMonthBrd2",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteBrd3TransactionMining",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Brd3TransactionMining",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											},
											"cosmosConfigTables": {
												"value": "@pipeline().parameters.cosmosConfigTables",
												"type": "Expression"
											},
											"cosmosDatabaseName": {
												"value": "@pipeline().parameters.cosmosDatabaseName",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"jobExecutionType": {
												"value": "@pipeline().parameters.jobExecutionType",
												"type": "Expression"
											},
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"schema": {
												"value": "@pipeline().parameters.schema",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-10-01"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "brd3_mining_output"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:32:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Brd3TransactionMining')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CheckPartitionValueMonthlyTrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckStartofMonthBrd2",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteBrd2TransactionMining",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Brd2TransactionMining",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											},
											"cosmosConfigTables": {
												"value": "@pipeline().parameters.cosmosConfigTables",
												"type": "Expression"
											},
											"cosmosDatabaseName": {
												"value": "@pipeline().parameters.cosmosDatabaseName",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"jobExecutionType": {
												"value": "@pipeline().parameters.jobExecutionType",
												"type": "Expression"
											},
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"schema": {
												"value": "@pipeline().parameters.schema",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-10-01"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "brd2_mining_output"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD2"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:32:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Brd2TransactionMining')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check_Blob_Load_date_Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_source",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"Load_date_blob_path": {
										"value": "@pipeline().parameters.Blob_File_Path_Location",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IF_Load_date_Exist_Return_True_or_False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check_Blob_Load_date_Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Load_date_Exists",
							"value": {
								"value": "@activity('Check_Blob_Load_date_Exists').output.exists",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IF_Load_date_Exists_Delete_Else_Execute_Copy_pipeline",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IF_Load_date_Exist_Return_True_or_False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('Load_date_Exists')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Check_Blob_Load_date_False_Activity",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Load_date_Not_Found",
										"value": "'Load_date is Not Found'"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Blob_Load_date_Delete_Activity",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Check_Blob_Load_date_wise_Delete_source",
											"type": "DatasetReference",
											"parameters": {
												"date2run": {
													"value": "@pipeline().parameters.date2run",
													"type": "Expression"
												},
												"Load_date_blob_path": {
													"value": "@pipeline().parameters.Blob_File_Path_Location",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"Blob_File_Path_Location": {
						"type": "string"
					}
				},
				"variables": {
					"Load_date_Exists": {
						"type": "Boolean"
					},
					"Load_date_Not_Found": {
						"type": "String"
					}
				},
				"folder": {
					"name": "misc"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-06T12:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Check_Blob_Load_date_wise_Delete_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Check_Blob_Partition_Exists_Delete_Activity_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check_Blob_Files_Exits",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "check_blob_files_source",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"date2runm1": {
										"value": "@pipeline().parameters.date2runm1",
										"type": "Expression"
									},
									"Blob_File_path": {
										"value": "@pipeline().parameters.Blob_File_path",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IF_Files_Exists_Return_True_or_False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check_Blob_Files_Exits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileExists",
							"value": {
								"value": "@activity('Check_Blob_Files_Exits').output.exists",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IF_Condition_True_Delete_Exists_partitions",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IF_Files_Exists_Return_True_or_False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FileExists')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Partition_Not_Found",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileNotThere",
										"value": "'There is no Load_date or Partition_date Folder'"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Delete_partitions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "check_blob_files_source",
											"type": "DatasetReference",
											"parameters": {
												"date2run": {
													"value": "@pipeline().parameters.date2run",
													"type": "Expression"
												},
												"date2runm1": {
													"value": "@pipeline().parameters.date2runm1",
													"type": "Expression"
												},
												"Blob_File_path": {
													"value": "@pipeline().parameters.Blob_File_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"date2runm1": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"Blob_File_path": {
						"type": "string"
					}
				},
				"variables": {
					"FileExists": {
						"type": "Boolean"
					},
					"Fileisthere": {
						"type": "String"
					},
					"FileNotThere": {
						"type": "String"
					}
				},
				"folder": {
					"name": "misc"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-06T12:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/check_blob_files_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDBConsumptionLayerProcessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetWorker",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workers",
							"value": {
								"value": "@{int(json(activity('GetConfig').output.config).job_capacity_details.workers)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetNodeType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "nodeType",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.nodeType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetClusterVersion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "clusterVersion",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.clusterVersion}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CosmosDBLoading",
						"type": "DatabricksSparkJar",
						"dependsOn": [
							{
								"activity": "SetWorker",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetNodeType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetClusterVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetConfigPath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetRerunFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.14:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"mainClassName": "com.thedatateam.cadenz.comet.BatchJob",
							"parameters": [
								"--eventType",
								"entity",
								"--configPath",
								"@variables('configPath')",
								"--batchDate",
								"@pipeline().parameters.partitionValue",
								"--rerunFlag",
								"@variables('rerunFlag')"
							],
							"libraries": [
								{
									"jar": "@variables('assemblyJar')"
								},
								{
									"jar": "@variables('assemblyAllDependencyJar')"
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetConfigPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "configPath",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).extract_run_details.configPath}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRerunFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rerunFlag",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).extract_run_details.rerunFlag}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CosmosDBLoading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CosmosDBLoading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "cosmosdb"
					},
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-04-12"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "master"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details,extract_run_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					}
				},
				"variables": {
					"runStatus": {
						"type": "String",
						"defaultValue": "success"
					},
					"nodeType": {
						"type": "String",
						"defaultValue": "Standard_DSS_v2"
					},
					"workers": {
						"type": "String",
						"defaultValue": "3"
					},
					"clusterVersion": {
						"type": "String",
						"defaultValue": "5.5.x-scala2.11"
					},
					"configPath": {
						"type": "String"
					},
					"rerunFlag": {
						"type": "String"
					},
					"eventType": {
						"type": "String"
					},
					"assemblyJar": {
						"type": "String",
						"defaultValue": "dbfs:/FileStore/jars/cadenz_lib/Comet-assembly-1.0.jar"
					},
					"assemblyAllDependencyJar": {
						"type": "String",
						"defaultValue": "dbfs:/FileStore/jars/cadenz_lib/Comet-assembly-1.0-deps.jar"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-04T05:18:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EntityProcessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetWorker",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workers",
							"value": {
								"value": "@{int(json(activity('GetConfig').output.config).job_capacity_details.workers)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetNodeType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "nodeType",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.nodeType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetClusterVersion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "clusterVersion",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.clusterVersion}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "EntityProcessing",
						"type": "DatabricksSparkJar",
						"dependsOn": [
							{
								"activity": "EventTypeChoice",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"mainClassName": "com.thedatateam.cadenz.comet.BatchJob",
							"parameters": [
								"--eventType",
								"@variables('eventType')",
								"--configPath",
								"@variables('configPath')",
								"--batchDate",
								"@pipeline().parameters.partitionValue",
								"--rerunFlag",
								"@variables('rerunFlag')"
							],
							"libraries": [
								{
									"jar": "@variables('assemblyJar')"
								},
								{
									"jar": "@variables('assemblyAllDependencyJar')"
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetConfigPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "configPath",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).entity_run_details.configPath}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRerunFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rerunFlag",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).entity_run_details.rerunFlag}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "EventTypeChoice",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetNodeType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetClusterVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetConfigPath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetRerunFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetWorker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.jobExecutionType,'entity')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetEventTypeDerivedEntity",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "eventType",
										"value": "profile"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetEventTypeEntity",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "eventType",
										"value": "entity"
									}
								}
							]
						}
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "EntityProcessing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "EntityProcessing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "derived_entity"
					},
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-04-08"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "trn_int_trigger"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details,entity_run_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					}
				},
				"variables": {
					"runStatus": {
						"type": "String",
						"defaultValue": "success"
					},
					"nodeType": {
						"type": "String",
						"defaultValue": "Standard_DSS_v2"
					},
					"workers": {
						"type": "String",
						"defaultValue": "3"
					},
					"clusterVersion": {
						"type": "String",
						"defaultValue": "5.5.x-scala2.11"
					},
					"configPath": {
						"type": "String"
					},
					"rerunFlag": {
						"type": "String"
					},
					"eventType": {
						"type": "String"
					},
					"assemblyJar": {
						"type": "String",
						"defaultValue": "dbfs:/FileStore/jars/cadenz_lib/Comet-assembly-1.0.jar"
					},
					"assemblyAllDependencyJar": {
						"type": "String",
						"defaultValue": "dbfs:/FileStore/jars/cadenz_lib/Comet-assembly-1.0-deps.jar"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T12:42:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteKramEntites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "kram_broker_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_broker_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_broker_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_broker_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_broker_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_corporate_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_broker_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_corporate_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_corporate_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_corporate_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_corporate_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_nbfc_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_corporate_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_nbfc_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_nbfc_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_nbfc_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_nbfc_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_real_estate_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_nbfc_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_real_estate_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_real_estate_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_real_estate_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_real_estate_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_se_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_real_estate_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_se_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_se_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_se_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_se_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_services_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_se_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_services_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_services_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_services_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_services_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_trader_entity_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_services_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_trader_entity_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_trader_model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_trader_entity_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_trader_model",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "kram_union_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "kram_trader_model",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "derived_entity",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "kram_union_table",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobExecutionType": {
						"type": "string"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details,entity_run_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T08:14:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EntityProcessing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteNeftRtgs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute NEFT",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_Neft",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"loadDate": {
									"value": "@pipeline().parameters.loadDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute RTGS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute NEFT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_RTGS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"loadDate": {
									"value": "@pipeline().parameters.loadDate",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					},
					"loadDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stg2landing_NeftRtgs"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-23T08:31:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_Neft')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_RTGS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteStockStatements')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "commercial_agri_monthly_stock_statement",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "commercial_agri_monthly_stock_statement",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "consumer_monthly_stock_statement",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "consumer_monthly_stock_statement",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "wbg_monthly_stock_statement",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "wbg_monthly_stock_statement",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ard_monthly_stock_statement",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EntityProcessing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"markerRootPath": {
									"value": "@pipeline().parameters.markerRootPath",
									"type": "Expression"
								},
								"jobSubjectArea": "ard_monthly_stock_statement",
								"cosmosDatabaseName": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details,entity_run_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-30T07:13:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EntityProcessing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MonthlyKramExecution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check_trigger_date",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteKramEntityfor-1st-day-of-month",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExecuteKramEntites",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"cosmosDatabaseName": {
												"value": "@pipeline().parameters.cosmosDatabaseName",
												"type": "Expression"
											},
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-10-01"
					},
					"cosmosConfigTables": {
						"type": "string"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string"
					},
					"jobExecutionType": {
						"type": "string"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-23T07:15:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ExecuteKramEntites')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MonthlyStockStatement')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "M-3",
				"activities": [
					{
						"name": "check_trigger_date",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteStocksStementMonth-4",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ExecuteStockStatements",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"jobExecutionType": {
												"value": "@pipeline().parameters.jobExecutionType",
												"type": "Expression"
											},
											"cosmosDatabaseName": {
												"value": "@pipeline().parameters.cosmosDatabaseName",
												"type": "Expression"
											},
											"partitionValue": {
												"value": "@startOfMonth(subtractFromTime(pipeline().parameters.partitionValue, 4, 'MONTH'),'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-10-01"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow/BRD3"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-13T16:15:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ExecuteStockStatements')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenTriggers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Open Triggers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Derive Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "comment",
										"value": ""
									},
									{
										"name": "feedback",
										"value": ""
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('alert_workflow/feedback_status_stage_one','/p_date=', pipeline().parameters.partitionValue)",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CosmosDbMongoDbApiSink",
								"writeBatchTimeout": "02:30:00",
								"writeBehavior": "upsert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "feedback",
											"type": "String"
										},
										"sink": {
											"path": "$['feedback']"
										}
									},
									{
										"source": {
											"name": "comment",
											"type": "String"
										},
										"sink": {
											"path": "$['comment']"
										}
									},
									{
										"source": {
											"name": "trigger_unique_id",
											"type": "String"
										},
										"sink": {
											"path": "$['trigger_unique_id']"
										}
									},
									{
										"source": {
											"name": "created_by",
											"type": "String"
										},
										"sink": {
											"path": "$['created_by']"
										}
									},
									{
										"source": {
											"name": "feedback_id",
											"type": "String"
										},
										"sink": {
											"path": "$['feedback_id']"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String"
										},
										"sink": {
											"path": "$['state']"
										}
									},
									{
										"source": {
											"name": "created_ts",
											"type": "String"
										},
										"sink": {
											"path": "$['created_ts']"
										}
									},
									{
										"source": {
											"name": "crn",
											"type": "String"
										},
										"sink": {
											"path": "$['crn']"
										}
									},
									{
										"source": {
											"name": "p_date",
											"type": "String"
										},
										"sink": {
											"path": "$['p_date']"
										}
									},
									{
										"source": {
											"name": "row_id",
											"type": "String"
										},
										"sink": {
											"path": "$['row_id']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "feedback_state_store",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@variables('container')",
										"type": "Expression"
									},
									"partitionValue": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "cosmos_db_feedback_profile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Master Feedback Profile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Open Triggers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "UpdateCrnStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Derive Status",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "OpenTriggerFlow",
								"type": "DataFlowReference",
								"parameters": {
									"partitionValue": {
										"value": "'@{pipeline().parameters.partitionValue}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ewsTrigger": {
										"partitionValue": {
											"value": "@pipeline().parameters.partitionValue",
											"type": "Expression"
										},
										"subjectArea": "ews",
										"container": {
											"value": "@variables('container')",
											"type": "Expression"
										}
									},
									"loadAdls": {
										"container": {
											"value": "@variables('container')",
											"type": "Expression"
										},
										"partitionValue": {
											"value": "@pipeline().parameters.partitionValue",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"container": {
						"type": "String",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/alert_workflow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-14T09:28:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/feedback_state_store')]",
				"[concat(variables('factoryId'), '/datasets/cosmos_db_feedback_profile')]",
				"[concat(variables('factoryId'), '/pipelines/UpdateCrnStatus')]",
				"[concat(variables('factoryId'), '/dataflows/OpenTriggerFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrepareJarsAndConfigs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_trigger_config",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "cosmos_db_trigger_config",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_json",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "UpdateJars",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "copy_global_filter_config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/UpdateJars",
							"baseParameters": {
								"uat_flag": {
									"value": "@pipeline().parameters.uat_flag",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": "Standard_E4as_v4",
								"workers": "1",
								"clusterVersion": "9.1.x-scala2.12"
							}
						}
					},
					{
						"name": "copy_global_filter_config",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "copy_trigger_config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "cosmos_db_global_filter_config",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_json_exp_filter",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"uat_flag": {
						"type": "string",
						"defaultValue": "false"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-05T06:23:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cosmos_db_trigger_config')]",
				"[concat(variables('factoryId'), '/datasets/blob_json')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/datasets/cosmos_db_global_filter_config')]",
				"[concat(variables('factoryId'), '/datasets/blob_json_exp_filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessingAndPopulating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "conditional_processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "set_cosmos_trigger_flag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "cosmosTriggerFlag",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_run_details.cosmosTriggerFlag}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "cosmos_consumption_trigger",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set_cosmos_trigger_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('cosmosTriggerFlag'),'true')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "consumption_population",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CosmosDBConsumptionLayerProcessing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											},
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"cosmosDatabaseName": {
												"value": "@pipeline().parameters.cosmosDatabaseName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "conditional_processing",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.jobExecutionType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "entity",
									"activities": [
										{
											"name": "entity_processing",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "EntityProcessing",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"jobExecutionType": {
														"value": "@pipeline().parameters.jobExecutionType",
														"type": "Expression"
													},
													"partitionValue": {
														"value": "@pipeline().parameters.partitionValue",
														"type": "Expression"
													},
													"markerRootPath": {
														"value": "@pipeline().parameters.markerRootPath",
														"type": "Expression"
													},
													"jobSubjectArea": {
														"value": "@pipeline().parameters.jobSubjectArea",
														"type": "Expression"
													},
													"cosmosDatabaseName": {
														"value": "@pipeline().parameters.cosmosDatabaseName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "derived_entity",
									"activities": [
										{
											"name": "derived_entity_processing",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "EntityProcessing",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"jobExecutionType": {
														"value": "@pipeline().parameters.jobExecutionType",
														"type": "Expression"
													},
													"partitionValue": {
														"value": "@pipeline().parameters.partitionValue",
														"type": "Expression"
													},
													"markerRootPath": {
														"value": "@pipeline().parameters.markerRootPath",
														"type": "Expression"
													},
													"jobSubjectArea": {
														"value": "@pipeline().parameters.jobSubjectArea",
														"type": "Expression"
													},
													"cosmosDatabaseName": {
														"value": "@pipeline().parameters.cosmosDatabaseName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "profile",
									"activities": [
										{
											"name": "profile_processing",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ProfileProcessing",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"jobExecutionType": {
														"value": "@pipeline().parameters.jobExecutionType",
														"type": "Expression"
													},
													"partitionValue": {
														"value": "@pipeline().parameters.partitionValue",
														"type": "Expression"
													},
													"markerRootPath": {
														"value": "@pipeline().parameters.markerRootPath",
														"type": "Expression"
													},
													"jobSubjectArea": {
														"value": "@pipeline().parameters.jobSubjectArea",
														"type": "Expression"
													},
													"cosmosDatabaseName": {
														"value": "@pipeline().parameters.cosmosDatabaseName",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "set_synapse_trigger_flag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "synapseTriggerFlag",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_run_details.synapseTriggerFlag}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "synapse_consumption_trigger",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set_synapse_trigger_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('synapseTriggerFlag'),'true')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "check_profile_entity_cosumption",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SynapseConditionProfileEntity",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"jobExecutionType": {
												"value": "@pipeline().parameters.jobExecutionType",
												"type": "Expression"
											},
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"schema": {
												"value": "@pipeline().parameters.schema",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-04-12"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "profile"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "ews"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_run_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"variables": {
					"cosmosTriggerFlag": {
						"type": "String",
						"defaultValue": "false"
					},
					"synapseTriggerFlag": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-02T09:26:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/pipelines/CosmosDBConsumptionLayerProcessing')]",
				"[concat(variables('factoryId'), '/pipelines/SynapseConditionProfileEntity')]",
				"[concat(variables('factoryId'), '/pipelines/EntityProcessing')]",
				"[concat(variables('factoryId'), '/pipelines/ProfileProcessing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProfileProcessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetWorker",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workers",
							"value": {
								"value": "@{int(json(activity('GetConfig').output.config).job_capacity_details.workers)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetNodeType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "nodeType",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.nodeType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetClusterVersion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "clusterVersion",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.clusterVersion}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ProfileProcessing",
						"type": "DatabricksSparkJar",
						"dependsOn": [
							{
								"activity": "SetWorker",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetNodeType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetClusterVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetConfigPath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetRerunFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"mainClassName": "com.thedatateam.cadenz.comet.BatchJob",
							"parameters": [
								"--eventType",
								"@pipeline().parameters.jobExecutionType",
								"--configPath",
								"@variables('configPath')",
								"--batchDate",
								"@pipeline().parameters.partitionValue",
								"--rerunFlag",
								"@variables('rerunFlag')"
							],
							"libraries": [
								{
									"jar": "@variables('assemblyJar')"
								},
								{
									"jar": "@variables('assemblyAllDependencyJar')"
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetConfigPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "configPath",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).profile_run_details.configPath}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRerunFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rerunFlag",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).profile_run_details.rerunFlag}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProfileProcessing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ProfileProcessing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "profile"
					},
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-04-12"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "ews"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details,profile_run_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					}
				},
				"variables": {
					"runStatus": {
						"type": "String",
						"defaultValue": "success"
					},
					"nodeType": {
						"type": "String",
						"defaultValue": "Standard_DSS_v2"
					},
					"workers": {
						"type": "String",
						"defaultValue": "3"
					},
					"clusterVersion": {
						"type": "String",
						"defaultValue": "5.5.x-scala2.11"
					},
					"configPath": {
						"type": "String"
					},
					"rerunFlag": {
						"type": "String"
					},
					"eventType": {
						"type": "String"
					},
					"assemblyJar": {
						"type": "String",
						"defaultValue": "dbfs:/FileStore/jars/cadenz_lib/Comet-assembly-1.0.jar"
					},
					"assemblyAllDependencyJar": {
						"type": "String",
						"defaultValue": "dbfs:/FileStore/jars/cadenz_lib/Comet-assembly-1.0-deps.jar"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-20T06:10:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ReportsRefresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EWS_CONSOLIDATED_REPORT_REFRESH",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[EWS_CONSOLIDATED_REPORT_REFRESH]",
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Reports"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-06T07:43:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RpInputFromUI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Rp_input_from_ui",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['CRN']"
										},
										"sink": {
											"name": "CRN",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RELATED_ENTITY_NAME']"
										},
										"sink": {
											"name": "RELATED_ENTITY_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RELATIONSHIP']"
										},
										"sink": {
											"name": "RELATIONSHIP",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "cosmos_db_entity_store",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "rp_union_input_table"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adls_entity_store",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"entityName": {
										"value": "@variables('entity')",
										"type": "Expression"
									},
									"container": {
										"value": "@variables('container')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"container": {
						"type": "String",
						"defaultValue": "job-data"
					},
					"entity": {
						"type": "String",
						"defaultValue": "rp_input_table_ui"
					}
				},
				"folder": {
					"name": "cosmos2entity"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T07:42:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cosmos_db_entity_store')]",
				"[concat(variables('factoryId'), '/datasets/adls_entity_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataLoadDateCheckBrd2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceLoadDateCheckBrd2",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteInwardChequeReturns",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "stag2landing_INWARD_CHEQUE_RETURN_REPORT",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stg2landingBrd2"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-05T12:08:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_INWARD_CHEQUE_RETURN_REPORT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataLoadMonthlyConsumerBl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceLoadDateCheckConsumerBl",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteConsumerBl",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "stag2landing_LOS_BL_CONSUMER",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"date2run": {
												"value": "@replace(pipeline().parameters.partitionValue,'-','')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-23T07:05:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_LOS_BL_CONSUMER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataLoadMonthlyKramModels')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceLoadDateCheckKramModels",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteKramModels",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "stage2landing_KramModel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"load_date": {
												"value": "@replace(pipeline().parameters.partitionValue,'-','')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-23T07:05:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stage2landing_KramModel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataLoadMonthlyLcBg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceLoadDateCheckLcBg",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteLcBg",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "stag2landing_LC_BG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stg2landingBrd2"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-16T10:17:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_LC_BG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataLoadMonthlyNpa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceLoadDateCheckNpa",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(startOfMonth(pipeline().parameters.partitionValue,'yyyy-MM-dd'),pipeline().parameters.partitionValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecuteNpa",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "stag2landing_NPA",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stg2landingBrd2"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-16T08:51:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_NPA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stag2landing_Masterpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stag2landing_KRAM_FINANCIAL_RATIOS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stag2landing_RP_INPUT_TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_FINANCIAL_RATIOS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Stag2landing_LOS_BL_FINANCIAL_RATIOS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_LOS_BL_FINANCIAL_RATIOS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "stag2landing_LOS_HL_LP_RH",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Stag2landing_LOS_BL_FINANCIAL_RATIOS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_LOS_HL_LP_RH",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "stag2landing_RP_INPUT_TABLE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stag2landing_LOS_WC_FINANCIAL_RATIOS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_RP_INPUT_TABLE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "stag2landing_LOS_WC_FINANCIAL_RATIOS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "stag2landing_LOS_HL_LP_RH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_LOS_WC_FINANCIAL_RATIOS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-14T08:53:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_LOS_BL_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_LOS_HL_LP_RH')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_RP_INPUT_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_LOS_WC_FINANCIAL_RATIOS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseConditionProfileEntity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckProfileEntity",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.jobExecutionType,'profile')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "synapse_consumption_population_entity",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SynapseConsumptionLayerProcessing",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											},
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"schema": {
												"value": "@pipeline().parameters.schema",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "synapse_consumption_population_profile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SynapseConsumptionLayerProcessingProfile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"partitionValue": {
												"value": "@pipeline().parameters.partitionValue",
												"type": "Expression"
											},
											"markerRootPath": {
												"value": "@pipeline().parameters.markerRootPath",
												"type": "Expression"
											},
											"jobSubjectArea": {
												"value": "@pipeline().parameters.jobSubjectArea",
												"type": "Expression"
											},
											"schema": {
												"value": "@pipeline().parameters.schema",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string"
					},
					"partitionValue": {
						"type": "string"
					},
					"jobSubjectArea": {
						"type": "string"
					},
					"markerRootPath": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:31:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SynapseConsumptionLayerProcessing')]",
				"[concat(variables('factoryId'), '/pipelines/SynapseConsumptionLayerProcessingProfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseConsumptionLayerProcessing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "entity_synapse_loading",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.04:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "p_date",
										"value": {
											"value": "@pipeline().parameters.partitionValue",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('entity_store/', pipeline().parameters.jobSubjectArea, '/p_date=', pipeline().parameters.partitionValue)",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": {
									"value": "@{concat('IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''', pipeline().parameters.schema, ''' AND  TABLE_NAME = ''' , pipeline().parameters.jobSubjectArea, ''')) BEGIN DELETE FROM [', pipeline().parameters.schema, '].[',pipeline().parameters.jobSubjectArea, '] WHERE p_date=''', pipeline().parameters.partitionValue, ''' END')}",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "cadenceAdlsLS",
										"type": "LinkedServiceReference"
									},
									"path": "job-metadata/adf_logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_entity_store",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"entityName": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "synapse_store",
								"type": "DatasetReference",
								"parameters": {
									"entityName": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "entity_synapse_loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "entity_synapse_loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "synapse"
					},
					"partitionValue": {
						"type": "string",
						"defaultValue": "2024-11-15"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "customer"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-15T05:34:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_entity_store')]",
				"[concat(variables('factoryId'), '/datasets/synapse_store')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseConsumptionLayerProcessingLanding')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "landing_synapse_loading",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "p_date",
										"value": {
											"value": "@pipeline().parameters.partitionValue",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.jobSubjectArea,'/load_date=',replace(pipeline().parameters.partitionValue, '-', ''))",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": {
									"value": "@{concat('IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''', pipeline().parameters.schema, ''' AND  TABLE_NAME = ''' , pipeline().parameters.jobSubjectArea, ''')) BEGIN DELETE FROM [', pipeline().parameters.schema, '].[',pipeline().parameters.jobSubjectArea, '] WHERE p_date=''', pipeline().parameters.partitionValue, ''' END')}",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "cadenceAdlsLS",
										"type": "LinkedServiceReference"
									},
									"path": "job-metadata/adf_logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_landing_csv",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"jobSubjectArea": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "synapse_store",
								"type": "DatasetReference",
								"parameters": {
									"entityName": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "landing_synapse_loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "landing_synapse_loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "synapse"
					},
					"partitionValue": {
						"type": "string"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobSubjectArea": {
						"type": "string"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_landing_csv')]",
				"[concat(variables('factoryId'), '/datasets/synapse_store')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseConsumptionLayerProcessingProfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "entity_synapse_loading",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "p_date",
										"value": {
											"value": "@pipeline().parameters.partitionValue",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('profiles/', pipeline().parameters.jobSubjectArea,'/', pipeline().parameters.jobSubjectArea, '_profile', '/p_date=', pipeline().parameters.partitionValue)",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": {
									"value": "@{concat('IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''', pipeline().parameters.schema, ''' AND  TABLE_NAME = ''' , pipeline().parameters.jobSubjectArea, ''')) BEGIN DELETE FROM [', pipeline().parameters.schema, '].[',pipeline().parameters.jobSubjectArea, '] WHERE p_date=''', pipeline().parameters.partitionValue, ''' END')}",
									"type": "Expression"
								},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "cadenceAdlsLS",
										"type": "LinkedServiceReference"
									},
									"path": "job-metadata/adf_logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_profile_store",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"subjectArea": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"container": "job-data"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "synapse_store",
								"type": "DatasetReference",
								"parameters": {
									"entityName": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "entity_synapse_loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "entity_synapse_loading",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "synapse"
					},
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-04-12"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "customer"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T10:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_profile_store')]",
				"[concat(variables('factoryId'), '/datasets/synapse_store')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionMining')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataProcessingNotebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SetClusterVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetNodeType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetWorker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.10:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/utils/crn_lob_validations",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								},
								"commonFilter": {
									"value": "@variables('commonFilter')",
									"type": "Expression"
								}
							},
							"libraries": [
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/attrs-21.2.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/fuzzysearch-0.7.3-cp38-cp38-linux_x86_64.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/fuzzywuzzy-0.18.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/python_Levenshtein-0.12.2-cp38-cp38-linux_x86_64.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/rapidfuzz-1.4.1-cp38-cp38-manylinux2010_x86_64.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/setuptools-56.2.0-py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/fuzzyCheck-1.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/relatedPartyFuzzy-1.0-py2.py3-none-any.whl"
								},
								{
									"whl": "dbfs:/FileStore/wheels/cadenz_lib/selfTransferFuzzy-1.0-py2.py3-none-any.whl"
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "RuleEngineNotebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DataProcessingNotebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/PROD/rule_engine",
							"baseParameters": {
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"configFile": {
									"value": "@variables('configFile')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"nodeType": {
									"value": "@variables('nodeType')",
									"type": "Expression"
								},
								"workers": {
									"value": "@variables('workers')",
									"type": "Expression"
								},
								"clusterVersion": {
									"value": "@variables('clusterVersion')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetWorker",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "workers",
							"value": {
								"value": "@{int(json(activity('GetConfig').output.config).job_capacity_details.workers)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetConfig",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "StartMarker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetConfigs",
							"headers": {
								"config_tables": {
									"value": "@pipeline().parameters.cosmosConfigTables",
									"type": "Expression"
								},
								"job_name": {
									"value": "@pipeline().parameters.jobSubjectArea",
									"type": "Expression"
								},
								"job_type": {
									"value": "@pipeline().parameters.jobExecutionType",
									"type": "Expression"
								},
								"database_name": {
									"value": "@pipeline().parameters.cosmosDatabaseName",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetNodeType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "nodeType",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.nodeType}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetClusterVersion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "clusterVersion",
							"value": {
								"value": "@{json(activity('GetConfig').output.config).job_capacity_details.clusterVersion}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "start",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SuccessMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RuleEngineNotebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FailureMarker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RuleEngineNotebook",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "DataProcessingNotebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ONEVIEW_JOB_METADATA]",
							"storedProcedureParameters": {
								"job_name": {
									"value": {
										"value": "@pipeline().parameters.jobSubjectArea",
										"type": "Expression"
									},
									"type": "String"
								},
								"job_type": {
									"value": {
										"value": "@pipeline().parameters.jobExecutionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": "failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "2021-04-12"
					},
					"cosmosConfigTables": {
						"type": "string",
						"defaultValue": "job_capacity_details"
					},
					"cosmosDatabaseName": {
						"type": "string",
						"defaultValue": "config_store"
					},
					"jobSubjectArea": {
						"type": "string",
						"defaultValue": "txn_mining_output_table"
					},
					"jobExecutionType": {
						"type": "string",
						"defaultValue": "entity"
					},
					"markerRootPath": {
						"type": "string",
						"defaultValue": "job-metadata/markers"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"variables": {
					"nodeType": {
						"type": "String",
						"defaultValue": "Standard_DSS_v2"
					},
					"workers": {
						"type": "String",
						"defaultValue": "3"
					},
					"clusterVersion": {
						"type": "String",
						"defaultValue": "8.1.x-scala2.12"
					},
					"configFile": {
						"type": "String",
						"defaultValue": "/dbfs/FileStore/configs/trigger_config_details.json"
					},
					"commonFilter": {
						"type": "String",
						"defaultValue": "/dbfs/FileStore/configs/global_filter_config_details.json"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-24T10:12:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]",
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]",
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionView')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TransactionView",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD2_UC2_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc5",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD2_UC5_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc6",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD2_UC6_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc7",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC7_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc8",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC8_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc11",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC11_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD2_UC1_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc3",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD2_UC3_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC1_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc9",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC9_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd2Uc4",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD2_UC4_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC2_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc3",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC3_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc4",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC4_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc5",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC5_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc6",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC6_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Brd3Uc10",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[', pipeline().parameters.schema, '].[OPERATIONAL_TRANSACTIONS_BRD3_UC10_REFRESH]')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"partition_value": {
									"value": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CadenceSynapseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PROD/CadenzFlow"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-07T17:41:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdateCrnStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Status Master Feedback Profile",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "AlertWorkflow",
							"headers": {
								"database_name": {
									"value": "@variables('cosmosDatabaseName')",
									"type": "Expression"
								},
								"partition_date": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								}
							},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "ewscadenceLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"cosmosDatabaseName": {
						"type": "String",
						"defaultValue": "profile_store"
					}
				},
				"folder": {
					"name": "PROD/alert_workflow"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-06T12:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ewscadenceLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/consumer-commercial-email-trigger1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "consumer-email-trigger1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "consumer-commercial-email-trigger1",
							"body": {
								"division": "consumer"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "ufce_prod_fa",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "commercial-email-trigger1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "consumer-commercial-email-trigger1",
							"body": {
								"division": "commercial"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "ufce_prod_fa",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DEV/Alerts-UFCE"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-06T12:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ufce_prod_fa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/consumer-commercial-email-trigger5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "consumer-email-trigger5",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "consumer-commercial-email-trigger5",
							"body": {
								"division": "consumer"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "ufce_prod_fa",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "commercial-email-trigger5",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "consumer-commercial-email-trigger5",
							"body": {
								"division": "commercial"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "ufce_prod_fa",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DEV/Alerts-UFCE"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-06T12:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ufce_prod_fa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/self_transfer_feedback')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Self Transfer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbMongoDbApiSource",
								"batchSize": 100
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "cosmos_db_entity_store",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "self_transfer_feedback"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "JsonGeneralized",
								"type": "DatasetReference",
								"parameters": {
									"container": "landing",
									"path": {
										"value": "@concat('cosmos_db/self_transfer_feedback/load_date=',replace(pipeline().parameters.p_date, '-','' ))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Covnert Json to Parquet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Load Self Transfer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Repos/anjo@watern.tech/kotak-transaction-mining/src/utils/Convert_JSON_2_PARQUET",
							"baseParameters": {
								"SRC": {
									"value": "@concat('abfss://landing@kmblewsproddatalake.dfs.core.windows.net/cosmos_db/self_transfer_feedback/load_date=',replace(pipeline().parameters.p_date, '-','' ))",
									"type": "Expression"
								},
								"DEST": {
									"value": "@concat('abfss://job-data@kmblewsproddatalake.dfs.core.windows.net/entity_store/self_transfer_feedback/p_date=',pipeline().parameters.p_date)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "cadenceProcessingLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"workers": "1"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_date": {
						"type": "string",
						"defaultValue": "2023-06-19"
					}
				},
				"folder": {
					"name": "PROD/Loaders/Cosmos to Landing"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-19T12:36:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cosmos_db_entity_store')]",
				"[concat(variables('factoryId'), '/datasets/JsonGeneralized')]",
				"[concat(variables('factoryId'), '/linkedServices/cadenceProcessingLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_Finacle1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STG-STG_FINACLE_HTD",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_STG_FINACLE_HTD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select * into #derivedhtd from (\nselect *, DERIVED_TRANS_ID = (LEFT(CONVERT(VARCHAR(30),TRAN_DATE),10)+ TRAN_ID + ''_'' + PART_TRAN_SRL_NUM), ROW_NUMBER() over (PARTITION BY TRAN_ID, PART_TRAN_SRL_NUM order by PSTD_DATE desc) as RNK  from \"STG\".\"STG_FINACLE_HTD\" where ACID in (select distinct ACID from \"STG\".\"STG_FINACLE_GAM\" where \n\"SCHM_TYPE\" in (''CA'',''CCA'',''ODA'') and \nCUST_ID in (select distinct \"BCIF_BANK Id\" from \"STG\".\"STG_GLEMS_MVIEW_FAC_DTLS\" where \"Limit Suffix\" in (''AJANT'',''ALKEM'',''BAIR'',''BANF'',''BC'',''BCCAP'',''BCCPX'',''BCCXP'',''BCD'',''BCL'',''BCLM'',''BCTL'',''BCWC'',''BG1'',''BG2'',''BG3'',''BG4'',''BGADH'',''BGBBD'',''BGFIN'',''BGLIM'',''BGPER'',''BGR2'',''BILLL'',''BLUEC'',''BUCR'',''BURCR'',''BUYCD'',''BUYCR'',''BUYER'',''BUYRC'',''BYCR'',''CADIL'',''CAPEX'',''CAPLC'',''CBDST'',''CC'',''CCOD'',''CHAN'',''CLNBI'',''CLNBL'',''CVVJK'',''DBAC1'',''DBAC2'',''DBAC5'',''DBDAC'',''DBDDW'',''DOMBD'',''DRWR'',''EBDMM'',''EBDTA'',''EBDTM'',''EBDTT'',''EBDVE'',''EPC'',''EPC1'',''EPC2'',''EPCCR'',''EPCFC'',''FACTO'',''FBD'',''FBN'',''FBP'',''FBP2'',''FBPAD'',''FDCLT'',''FLCIN'',''FRGNA'',''FRGNB'',''IDEA'',''ILCFL'',''IMCLR'',''IMSTR'',''INBAL'',''INDIS'',''INHHM'',''INMNM'',''INMUL'',''INOT1'',''INOT2'',''INOT3'',''INOT4'',''INOT6'',''INTAF'',''INTAS'',''INVAD'',''INVDF'',''INVDI'',''INVFI'',''INVO'',''INVPU'',''KCCL'',''LALOU'',''LC'',''LCBD'',''LCBDC'',''LCBDL'',''LCBDS'',''LCBL'',''LCCAP'',''LCCP1'',''LCCP2'',''LCCPX'',''LCFBL'',''LCIBL'',''LCIMP'',''LCIND'',''LCLIM'',''LCNPB'',''LCNSB'',''LCPBD'',''LCPXF'',''LCPXI'',''LCSBD'',''LCWC'',''LCWCF'',''LCWCI'',''LOTML'',''LOU'',''MEDLE'',''MICRO'',''MULDI'',''NICHO'',''OD'',''ODFD'',''ODHAN'',''PBD1'',''PBD2'',''PBUY1'',''PBUY2'',''PBUY3'',''PBUY4'',''PC'',''PCFC1'',''PCFC2'',''PCFCI'',''PCFCL'',''PCFCN'',''PCFCR'',''PCFCY'',''PCFRN'',''PCINR'',''PCLI'',''PCLIM'',''PCRUP'',''PCWC'',''PION'',''POBAL'',''POFUN'',''POHOS'',''POMNM'',''POMUL'',''POONA'',''POTML'',''PSC'',''PSCFC'',''PSCIN'',''PUR'',''PURC1'',''RECEV'',''RFACT'',''SBD1'',''SBD11'',''SBD2'',''SBD3'',''SBD4'',''SBD5'',''SBD6'',''SBDAL'',''SBDB'',''SBDCE'',''SBDGB'',''SBDMM'',''SBDS'',''SBDTM'',''SBLC'',''SBLCB'',''SBLCI'',''SBLCM'',''SBLCY'',''SIF'',''SPENG'',''STL'',''STLAD'',''STLCP'',''STLFC'',''STLL'',''STLLI'',''STLWD'',''SUNPH'',''SUPL'',''SUPP'',''TATA'',''TCD'',''TREDS'',''VAPIP'',''WCCLI'',''WCDL'',''WCDL2'',''WCDLA'',''WCDLD'',''WCDLM''))) and DATEFORMAT(LCHG_TIME, ''yyyymmdd'') = ''',pipeline().parameters.delta,''' ','\n)a\n\nselect * from #derivedhtd where RNK=1 ')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 100000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_STG_FINACLE_HTD",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_STG_FINACLE_HTD1",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									},
									"date2runm1": {
										"value": "@pipeline().parameters.delta",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_STG_FINACLE_HTD",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Partition_Exists_Delete_Activity_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"date2runm1": {
									"value": "@pipeline().parameters.delta",
									"type": "Expression"
								},
								"Blob_File_path": {
									"value": "@variables('Blob_File_Path_STG_FINACLE_HTD')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"delta": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_STG_FINACLE_HTD": {
						"type": "String",
						"defaultValue": "FINACLE/STG.STG_FINACLE_HTD/load_date="
					}
				},
				"folder": {
					"name": "HistoricalRun"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T12:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_STG_FINACLE_HTD')]",
				"[concat(variables('factoryId'), '/datasets/csv_STG_FINACLE_HTD1')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Partition_Exists_Delete_Activity_Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_INWARD_CHEQUE_RETURN_REPORT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_INWARD_CHEQUE_RETURN_REPORT",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.partitionValue,'-','')",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_INWARD_CHEQUE_RETURN_REPORT')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "INWARD_CHEQUE_RETURN_REPORT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_INWARD_CHEQUE_RETURN_REPORT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('SELECT\n  ICI.ACCT_SOL_ID AS \"ACCT_SOL_ID\",\n  GAC.SECTOR_CODE ,\n  (\n    CASE\n      WHEN ICI.ACID = GAM.ACID\n      THEN GAM.FORACID\n      ELSE ''''\n    END) AS \"ACCT_NUMBER\",\n  (\n    CASE\n      WHEN ICI.ACID = GAM.ACID\n      THEN GAM.ACCT_NAME\n      ELSE ''''\n    END) AS \"ACCT_NAME\",\n  (\n    CASE\n      WHEN GAM.ACID=ICI.ACID\n      THEN GAM.SCHM_CODE\n      ELSE ''''\n    END)AS \"SCHEME_CODE\" ,\n  (\n    CASE\n      WHEN GAM.ACID=ICI.ACID\n      THEN GAM.SCHM_TYPE\n      ELSE ''''\n    END)AS SCHM_TYPE ,\n  (\n    CASE\n      WHEN GAM.ACID=ICI.ACID\n      THEN CONVERT(VARCHAR,GAM.ACCT_OPN_DATE)\n      ELSE ''''\n    END)       AS ACCT_OPN_DATE ,\n  ICI.INST_NUM AS \"INSTR_NO\",\n  ICI.INST_AMT AS \"AMOUNT\",\n  ICI.VALUE_DATE ,\n  ICI.ZONE_CODE AS \"ZONE_CODE\",\n  ICI.SOL_ID    AS \"ZONE_SOL\",\n  (\n    CASE\n      WHEN GAM.FREZ_CODE <> ''''\n      THEN ''FREEZED''\n      ELSE (\n          CASE GAM.SCHM_TYPE\n            WHEN ''SBA''\n            THEN SMT.ACCT_STATUS\n            WHEN ''CAA''\n            THEN SMT.ACCT_STATUS\n            WHEN ''ODA''\n            THEN CAM.ACCT_STATUS\n            WHEN ''CCA''\n            THEN CAM.ACCT_STATUS\n          END)\n    END) AS \"CASA_ACCOUNT_STATUS\",\n  CASE\n    WHEN ICI.REJ_CODE_1 IS NOT NULL\n    THEN ISNULL(ICI.REJ_CODE_1,'''') +'' - ''+ CRC.CLG_REJ_DESC\n  END AS \"RETN_CODE_1\",\n  CASE\n    WHEN ICI.REJ_CODE_2 IS NOT NULL\n    THEN ISNULL(ICI.REJ_CODE_2,'''') +'' - ''+ CRC.CLG_REJ_DESC\n  END AS \"RETN_CODE_2\",\n  CASE\n    WHEN ICI.REJ_CODE_3 IS NOT NULL\n    THEN ISNULL(ICI.REJ_CODE_3,'''') +'' - ''+ CRC.CLG_REJ_DESC\n  END AS \"RETN_CODE_3\",\n  CASE\n    WHEN ICI.REJ_CODE_4 IS NOT NULL\n    THEN ISNULL(ICI.REJ_CODE_4,'''') +'' - ''+ CRC.CLG_REJ_DESC\n  END AS \"RETN_CODE_4\",\n  CASE\n    WHEN ICI.REJ_CODE_5 IS NOT NULL\n    THEN ISNULL(ICI.REJ_CODE_5,'''') +'' - ''+ CRC.CLG_REJ_DESC\n  END AS \"RETN_CODE_5\",\n  ICI.PRES_SORT_CODE ,\n  (\n    CASE\n      WHEN CMG.CIF_ID = GAM.CIF_ID\n      THEN CMG.CUST_TYPE_CODE\n      ELSE ''''\n    END)        AS \"CUST_TYPE\",\n  ICI.ZONE_DATE AS \"ZONE_DATE\",\n  CUSTTYPE.CUST_TYPE_DESC,\n  GAM.CIF_ID\nFROM\n  STG.STG_FINACLE_ICI ICI\nINNER JOIN STG.STG_FINACLE_GAM GAM\nON\n  ICI.ACID      = GAM.ACID\nAND ICI.BANK_ID = GAM.BANK_ID\nINNER JOIN STG.STG_FINACLE_CMG CMG\nON\n  GAM.CIF_ID    = CMG.CIF_ID\nAND CMG.BANK_ID = GAM.BANK_ID\nINNER JOIN STG.STG_FINACLE_CRC CRC\nON\n  ICI.REJ_CODE_1 = CRC.CLG_REJ_CODE\nLEFT JOIN STG.STG_FINACLE_SMT SMT\nON\n  GAM.ACID      = SMT.ACID\nAND GAM.BANK_ID = SMT.BANK_ID\nLEFT JOIN STG.STG_FINACLE_CAM CAM\nON\n  GAM.ACID      = CAM.ACID\nAND GAM.BANK_ID = CAM.BANK_ID\nINNER JOIN STG.STG_FINACLE_GAC GAC\nON\n  GAC.ACID=ICI.ACID\nINNER JOIN\n  (\n    SELECT\n      A.VALUE,\n      A.CATEGORYID,\n      B.LOCALETEXT AS CUST_TYPE_DESC\n    FROM\n      STG.STG_FINACLE_CATEGORIES A\n    INNER JOIN STG.STG_FINACLE_CATEGORY_LANG B\n    ON\n      A.CATEGORYID = B.CATEGORYID\n    WHERE\n      CATEGORYTYPE = ''ACCOUNT_TYPE''\n  )\n  CUSTTYPE ON CMG.CUST_TYPE_CODE = CUSTTYPE.VALUE\nWHERE\n  GAM.ENTITY_CRE_FLG   =''Y''\nAND GAM.DEL_FLG        = ''N''\nAND GAM.CIF_ID in (select DISTINCT `BCIF_BANK Id` FROM STG.STG_GLEMS_MVIEW_FAC_DTLS\nWHERE \n`Limit Suffix` IN (''AJANT'',''ALKEM'',''BAIR'',''BANF'',''BC'',''BCCAP'',''BCCPX'',''BCCXP'',''BCD'',''BCL'',''BCLM'',''BCTL'',\n''BCWC'',''BG1'',''BG2'',''BG3'',''BG4'',''BGADH'',''BGBBD'',''BGFIN'',''BGLIM'',''BGPER'',''BGR2'',''BILLL'',\n''BLUEC'',''BUCR'',''BURCR'',''BUYCD'',''BUYCR'',''BUYER'',''BUYRC'',''BYCR'',''CADIL'',''CAPEX'',''CAPLC'',\n''CBDST'',''CC'',''CCOD'',''CHAN'',''CLNBI'',''CLNBL'',''CVVJK'',''DBAC1'',''DBAC2'',''DBAC5'',''DBDAC'',\n''DBDDW'',''DOMBD'',''DRWR'',''EBDMM'',''EBDTA'',''EBDTM'',''EBDTT'',''EBDVE'',''EPC'',''EPC1'',''EPC2'',\n''EPCCR'',''EPCFC'',''FACTO'',''FBD'',''FBN'',''FBP'',''FBP2'',''FBPAD'',''FDCLT'',''FLCIN'',''FRGNA'',\n''FRGNB'',''IDEA'',''ILCFL'',''IMCLR'',''IMSTR'',''INBAL'',''INDIS'',''INHHM'',''INMNM'',''INMUL'',\n''INOT1'',''INOT2'',''INOT3'',''INOT4'',''INOT6'',''INTAF'',''INTAS'',''INVAD'',''INVDF'',''INVDI'',\n''INVFI'',''INVO'',''INVPU'',''KCCL'',''LALOU'',''LC'',''LCBD'',''LCBDC'',''LCBDL'',''LCBDS'',''LCBL'',\n''LCCAP'',''LCCP1'',''LCCP2'',''LCCPX'',''LCFBL'',''LCIBL'',''LCIMP'',''LCIND'',''LCLIM'',''LCNPB'',\n''LCNSB'',''LCPBD'',''LCPXF'',''LCPXI'',''LCSBD'',''LCWC'',''LCWCF'',''LCWCI'',''LOTML'',''LOU'',\n''MEDLE'',''MICRO'',''MULDI'',''NICHO'',''OD'',''ODFD'',''ODHAN'',''PBD1'',''PBD2'',''PBUY1'',''PBUY2'',\n''PBUY3'',''PBUY4'',''PC'',''PCFC1'',''PCFC2'',''PCFCI'',''PCFCL'',''PCFCN'',''PCFCR'',''PCFCY'',''PCFRN'',\n''PCINR'',''PCLI'',''PCLIM'',''PCRUP'',''PCWC'',''PION'',''POBAL'',''POFUN'',''POHOS'',''POMNM'',''POMUL'',\n''POONA'',''POTML'',''PSC'',''PSCFC'',''PSCIN'',''PUR'',''PURC1'',''RECEV'',''RFACT'',''SBD1'',''SBD11'',\n''SBD2'',''SBD3'',''SBD4'',''SBD5'',''SBD6'',''SBDAL'',''SBDB'',''SBDCE'',''SBDGB'',''SBDMM'',''SBDS'',''SBDTM'',\n''SBLC'',''SBLCB'',''SBLCI'',''SBLCM'',''SBLCY'',''SIF'',''SPENG'',''STL'',''STLAD'',''STLCP'',''STLFC'',''STLL'',\n''STLLI'',''STLWD'',''SUNPH'',''SUPL'',''SUPP'',''TATA'',''TCD'',''TREDS'',''VAPIP'',''WCCLI'',''WCDL'',''WCDL2'',\n''WCDLA'',''WCDLD'',''WCDLM'')\n)\nAND CMG.ENTITY_CRE_FLG =''Y''\nAND CMG.DEL_FLG        =''N''\nand REJ_TYPE = ''I''\nAND ICI.ZONE_DATE BETWEEN ''',  startOfMonth(subtractFromTime(pipeline().parameters.partitionValue, 1, 'MONTH'),'yyyy-MM-dd'),''' AND ''', subtractFromTime(pipeline().parameters.partitionValue, 1, 'DAY','yyyy-MM-dd'), '''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_INWARD_CHEQUE_RETURN_REPORT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_INWARD_CHEQUE_RETURN_REPORT",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@pipeline().parameters.partitionValue",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "synapse_consumption",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "INWARD_CHEQUE_RETURN_REPORT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SynapseConsumptionLayerProcessingLanding",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"jobExecutionType": "synapse",
								"partitionValue": {
									"value": "@pipeline().parameters.partitionValue",
									"type": "Expression"
								},
								"jobSubjectArea": "INWARD_CHEQUE_RETURN_REPORT",
								"schema": "dbo"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"Blob_File_Path_INWARD_CHEQUE_RETURN_REPORT": {
						"type": "String",
						"defaultValue": "INWARD_CHEQUE_RETURN_REPORT/load_date="
					}
				},
				"folder": {
					"name": "stg2landingBrd2"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T12:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_INWARD_CHEQUE_RETURN_REPORT')]",
				"[concat(variables('factoryId'), '/datasets/csv_INWARD_CHEQUE_RETURN_REPORT')]",
				"[concat(variables('factoryId'), '/pipelines/SynapseConsumptionLayerProcessingLanding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_BROKER_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_BROKER_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n  mc.company_code as ''COMPANY CODE'',\n  mc.company_name as ''COMPANY NAME'',\n  mc.company_bankcode as ''CUSTOMER ID'',\n  mc.bcif as ''BCIF'',\n  mm.m_name as ''MODEL NAME'',\n  DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n  DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n  ch.comp_baseyear as ''BASE YEAR'',\n  ch.rating_year as ''RATING YEAR'',\n  mf.comp_findesc as ''LINEITEM'',\n  df.data2_year as ''FINANCIAL YEAR'',\n  df.data2_value as ''VALUE'',\n  ch.comp_overallgrade as ''LATEST OBLIGOR RATING'',\n  df.data2_year as ''LAST AUDITED YEAR''\nfrom\n  STG.STG_KRAM_MST_COMPANY mc,\n  STG.STG_KRAM_COMP_HEADER ch,\n  STG.STG_KRAM_MST_MODEL mm,\n  STG.STG_KRAM_MST_COMPFIN mf,\n  STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n  mc.company_code = ch.comp_compcode\n  and ch.comp_model = mm.m_code\n  and df.data2_assesscode = ch.comp_assesscode\n  and mf.comp_fincode = df.data2_compfincode\n  and df.data2_year = ch.comp_baseyear\n  and ch.comp_casefinal = ''Y''\n  and mm.m_code = ''M12''\n  and mf.comp_mcode = ch.comp_model\n  and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n  and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_BROKER_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_BROKER_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:10:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_FINANCIAL_RATIOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "KRAM_FINANCIAL_RATIOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select * into #kramdata from (\nselect mc.company_code as \"COMPANY CODE\",\n       mc.company_name as \"COMPANY NAME\",\n        --mc.company_bankcode as \"CUSTOMER ID\",\n        mc.BCIF as \"CUSTOMER ID\",\n        --mm.m_name as \"MODEL NAME\",\n       ch.comp_inidate as \"INITATION DATE\",\n       ch.comp_datefinal as \"FINALISATION DATE\",dense_rank() over (PARTITION BY mc.company_code,mf.comp_findesc order by ch.comp_datefinal desc ) as RNK,\n       ch.comp_baseyear as \"BASE YEAR\",\n       ch.rating_year as \"RATING YEAR\",\n       mf.comp_findesc as \"LINEITEM\",\n       df.data2_year as \"FINACIAL YEAR\",\n       df.data2_value as \"VALUE\",\n       mf.comp_fincode as \"COMPANY FINCODE\",\nch.comp_casefinal as \"COMPANY CASE FINAL\",\nch.comp_model AS \"COMPANY MODEL\",\nch.comp_assesscode AS \"COMPANY ASSES CODE\"\n  from STG.STG_KRAM_MST_COMPANY   mc,\n       STG.STG_KRAM_COMP_HEADER   ch,\n       --STG.STG_KRAM_MST_MODEL     mm,\n       STG.STG_KRAM_MST_COMPFIN   mf,\n       STG.STG_KRAM_DATA_COMPFIN1 df\nwhere mc.company_code = ch.comp_compcode\n   and ch.comp_casefinal = 'Y'\n   and ch.comp_model = mc.company_mcode\n   --and mm.m_code='M10'\n--   and mc.company_mcode=mm.m_code\n   and df.data2_assesscode = ch.comp_assesscode\n   and df.data2_year = ch.comp_baseyear\n   and mf.comp_fincode = df.data2_compfincode\n   and mf.comp_mcode = ch.comp_model\n   and ch.comp_baseyear = 2020\n   and mc.BCIF in (select distinct \"BCIF_BANK Id\" from \"STG\".\"STG_GLEMS_MVIEW_FAC_DTLS\" where \"Limit Suffix\" in ('AJANT','ALKEM','BAIR','BANF','BC','BCCAP','BCCPX','BCCXP','BCD','BCL','BCLM','BCTL','BCWC','BG1','BG2','BG3','BG4','BGADH','BGBBD','BGFIN','BGLIM','BGPER','BGR2','BILLL','BLUEC','BUCR','BURCR','BUYCD','BUYCR','BUYER','BUYRC','BYCR','CADIL','CAPEX','CAPLC','CBDST','CC','CCOD','CHAN','CLNBI','CLNBL','CVVJK','DBAC1','DBAC2','DBAC5','DBDAC','DBDDW','DOMBD','DRWR','EBDMM','EBDTA','EBDTM','EBDTT','EBDVE','EPC','EPC1','EPC2','EPCCR','EPCFC','FACTO','FBD','FBN','FBP','FBP2','FBPAD','FDCLT','FLCIN','FRGNA','FRGNB','IDEA','ILCFL','IMCLR','IMSTR','INBAL','INDIS','INHHM','INMNM','INMUL','INOT1','INOT2','INOT3','INOT4','INOT6','INTAF','INTAS','INVAD','INVDF','INVDI','INVFI','INVO','INVPU','KCCL','LALOU','LC','LCBD','LCBDC','LCBDL','LCBDS','LCBL','LCCAP','LCCP1','LCCP2','LCCPX','LCFBL','LCIBL','LCIMP','LCIND','LCLIM','LCNPB','LCNSB','LCPBD','LCPXF','LCPXI','LCSBD','LCWC','LCWCF','LCWCI','LOTML','LOU','MEDLE','MICRO','MULDI','NICHO','OD','ODFD','ODHAN','PBD1','PBD2','PBUY1','PBUY2','PBUY3','PBUY4','PC','PCFC1','PCFC2','PCFCI','PCFCL','PCFCN','PCFCR','PCFCY','PCFRN','PCINR','PCLI','PCLIM','PCRUP','PCWC','PION','POBAL','POFUN','POHOS','POMNM','POMUL','POONA','POTML','PSC','PSCFC','PSCIN','PUR','PURC1','RECEV','RFACT','SBD1','SBD11','SBD2','SBD3','SBD4','SBD5','SBD6','SBDAL','SBDB','SBDCE','SBDGB','SBDMM','SBDS','SBDTM','SBLC','SBLCB','SBLCI','SBLCM','SBLCY','SIF','SPENG','STL','STLAD','STLCP','STLFC','STLL','STLLI','STLWD','SUNPH','SUPL','SUPP','TATA','TCD','TREDS','VAPIP','WCCLI','WCDL','WCDL2','WCDLA','WCDLD','WCDLM')) \n-- and LINEITEM in ('Net Sales','(I) Investments in Subsidiary companies/ affiliate','Total Networth','Sundry Creditors (Trade)','TANGIBLE NETWORTH', 'RECEIVABLES other than deferred & exports (Incl. b','Export Receivables (including bill purchased and d','Retention Money / Security Deposit')\n)a\n\nselect * from #kramdata where RNK=1"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_FINANCIAL_RATIOS/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T12:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_LARGE_CORPORATE_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_LARGE_CORPORATE_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n  mc.company_code as ''COMPANY CODE'',\n  mc.company_name as ''COMPANY NAME'',\n  mc.company_bankcode as ''CUSTOMER ID'',\n  mc.bcif as ''BCIF'',\n  mm.m_name as ''MODEL NAME'',\n  DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n  DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n  ch.comp_baseyear as ''BASE YEAR'',\n  ch.rating_year as ''RATING YEAR'',\n  mf.comp_findesc as ''LINEITEM'',\n  df.data2_year as ''FINANCIAL YEAR'',\n  df.data2_value as ''VALUE'',\n  ch.comp_overallgrade as ''LATEST OBLIGOR RATING''\nfrom\n  STG.STG_KRAM_MST_COMPANY mc,\n  STG.STG_KRAM_COMP_HEADER ch,\n  STG.STG_KRAM_MST_MODEL mm,\n  STG.STG_KRAM_MST_COMPFIN mf,\n  STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n  mc.company_code = ch.comp_compcode\n  and ch.comp_casefinal = ''Y''\n  and ch.comp_model = mm.m_code\n  and mm.m_code = ''M03''\n  and df.data2_assesscode = ch.comp_assesscode\n  and df.data2_year = ch.comp_baseyear\n  and mf.comp_fincode = df.data2_compfincode\n  and mf.comp_mcode = ch.comp_model\n  and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n  and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_LARGE_CORPORATE_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_LARGE_CORPORATE_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_NBFC_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_NBFC_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n    mc.company_code as ''COMPANY CODE'',\n    mc.company_name as ''COMPANY NAME'',\n    mc.company_bankcode as ''CUSTOMER ID'',\n    mc.bcif as ''BCIF'',\n    mm.m_name as ''MODEL NAME'',\n    DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n    DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n    ch.comp_baseyear as ''BASE YEAR'',\n    ch.rating_year as ''RATING YEAR'',\n    mf.comp_findesc as ''LINEITEM'',\n    df.data2_year as ''FINANCIAL YEAR'',\n    df.data2_value as ''VALUE'',\n    ch.comp_overallgrade as ''LATEST OBLIGOR RATING'',\n    df.data2_year as ''LAST AUDITED YEAR''\nfrom\n    STG.STG_KRAM_MST_COMPANY mc,\n    STG.STG_KRAM_COMP_HEADER ch,\n    STG.STG_KRAM_MST_MODEL mm,\n    STG.STG_KRAM_MST_COMPFIN mf,\n    STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n    mc.company_code = ch.comp_compcode\n    and ch.comp_casefinal = ''Y''\n    and ch.comp_model = mm.m_code\n    and mm.m_code = ''M20''\n    and df.data2_assesscode = ch.comp_assesscode\n    and df.data2_year = ch.comp_baseyear\n    and mf.comp_fincode = df.data2_compfincode\n    and mf.comp_mcode = ch.comp_model\n    and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n    and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_NBFC_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_NBFC_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_REAL_ESTATE_DEVELOPER_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_REAL_ESTATE_DEVELOPER_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n    mc.company_code as ''COMPANY CODE'',\n    mc.company_name as ''COMPANY NAME'',\n    mc.company_bankcode as ''CUSTOMER ID'',\n    mc.bcif as ''BCIF'',\n    mm.m_name as ''MODEL NAME'',\n    DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n    DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n    ch.comp_baseyear as ''BASE YEAR'',\n    ch.rating_year as ''RATING YEAR'',\n    mf.comp_findesc as ''LINEITEM'',\n    df.data2_year as ''FINANCIAL YEAR'',\n    df.data2_value as ''VALUE'',\n    ch.comp_overallgrade as ''LATEST OBLIGOR RATING'',\n    df.data2_year as ''LAST AUDITED YEAR''\nfrom\n    STG.STG_KRAM_MST_COMPANY mc,\n    STG.STG_KRAM_COMP_HEADER ch,\n    STG.STG_KRAM_MST_MODEL mm,\n    STG.STG_KRAM_MST_COMPFIN mf,\n    STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n    mc.company_code = ch.comp_compcode\n    and ch.comp_casefinal = ''Y''\n    and ch.comp_model = mm.m_code\n    and mm.m_code = ''M17''\n    and df.data2_assesscode = ch.comp_assesscode\n    and df.data2_year = ch.comp_baseyear\n    and mf.comp_fincode = df.data2_compfincode\n    and mf.comp_mcode = ch.comp_model\n    and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n    and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_REAL_ESTATE_DEVELOPER_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_REAL_ESTATE_DEVELOPER_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_SERVICES_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_SERVICES_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n    mc.company_code as ''COMPANY CODE'',\n    mc.company_name as ''COMPANY NAME'',\n    mc.company_bankcode as ''CUSTOMER ID'',\n    mc.bcif as ''BCIF'',\n    mm.m_name as ''MODEL NAME'',\n    DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n    DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n    ch.comp_baseyear as ''BASE YEAR'',\n    ch.rating_year as ''RATING YEAR'',\n    mf.comp_findesc as ''LINEITEM'',\n    df.data2_year as ''FINANCIAL YEAR'',\n    df.data2_value as ''VALUE'',\n    ch.comp_overallgrade as ''LATEST OBLIGOR RATING'',\n    df.data2_year as ''LAST AUDITED YEAR''\nfrom\n    STG.STG_KRAM_MST_COMPANY mc,\n    STG.STG_KRAM_COMP_HEADER ch,\n    STG.STG_KRAM_MST_MODEL mm,\n    STG.STG_KRAM_MST_COMPFIN mf,\n    STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n    mc.company_code = ch.comp_compcode\n    and ch.comp_casefinal = ''Y''\n    and ch.comp_model = mm.m_code\n    and mm.m_code = ''M10''\n    and df.data2_assesscode = ch.comp_assesscode\n    and df.data2_year = ch.comp_baseyear\n    and mf.comp_fincode = df.data2_compfincode\n    and mf.comp_mcode = ch.comp_model\n    and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n    and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_SERVICES_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_SERVICES_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_SE_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_SE_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n    mc.company_code as ''COMPANY CODE'',\n    mc.company_name as ''COMPANY NAME'',\n    mc.company_bankcode as ''CUSTOMER ID'',\n    mc.bcif as ''BCIF'',\n    mm.m_name as ''MODEL NAME'',\n    DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n    DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n    ch.comp_baseyear as ''BASE YEAR'',\n    ch.rating_year as ''RATING YEAR'',\n    mf.comp_findesc as ''LINEITEM'',\n    df.data2_year as ''FINANCIAL YEAR'',\n    df.data2_value as ''VALUE'',\n    ch.comp_overallgrade as ''LATEST OBLIGOR RATING'',\n    df.data2_year ''LAST AUDITED YEAR''\nfrom\n    STG.STG_KRAM_MST_COMPANY mc,\n    STG.STG_KRAM_COMP_HEADER ch,\n    STG.STG_KRAM_MST_MODEL mm,\n    STG.STG_KRAM_MST_COMPFIN mf,\n    STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n    mc.company_code = ch.comp_compcode\n    and ch.comp_casefinal = ''Y''\n    and ch.comp_model = mm.m_code\n    and mm.m_code = ''M04''\n    and df.data2_assesscode = ch.comp_assesscode\n    and df.data2_year = ch.comp_baseyear\n    and mf.comp_fincode = df.data2_compfincode\n    and mf.comp_mcode = ch.comp_model\n    and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n    and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_SE_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_SE_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_KRAM_TRADER_MODEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "KRAM_TRADER_MODEL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select\n    mc.company_code as ''COMPANY CODE'',\n    mc.company_name as ''COMPANY NAME'',\n    mc.company_bankcode as ''CUSTOMER ID'',\n    mc.bcif as ''BCIF'',\n    mm.m_name as ''MODEL NAME'',\n    DATEFORMAT(ch.comp_inidate , ''yyyy-MM-dd'') as ''INITATION DATE'',\n    DATEFORMAT(ch.comp_datefinal, ''yyyy-MM-dd'') as ''FINALISATION DATE'',\n    ch.comp_baseyear as ''BASE YEAR'',\n    ch.rating_year as ''RATING YEAR'',\n    mf.comp_findesc as ''LINEITEM'',\n    df.data2_year as ''FINANCIAL YEAR'',\n    df.data2_value as ''VALUE'',\n    ch.comp_overallgrade as ''LATEST OBLIGOR RATING'',\n    df.data2_year as ''LAST AUDITED YEAR''\nfrom\n    STG.STG_KRAM_MST_COMPANY mc,\n    STG.STG_KRAM_COMP_HEADER ch,\n    STG.STG_KRAM_MST_MODEL mm,\n    STG.STG_KRAM_MST_COMPFIN mf,\n    STG.STG_KRAM_DATA_COMPFIN1 df\nwhere\n    mc.company_code = ch.comp_compcode\n    and ch.comp_casefinal = ''Y''\n    and ch.comp_model = mm.m_code\n    and mm.m_code = ''M13''\n    and df.data2_assesscode = ch.comp_assesscode\n    and df.data2_year = ch.comp_baseyear\n    and mf.comp_fincode = df.data2_compfincode\n    and mf.comp_mcode = ch.comp_model\n    and ch.comp_baseyear > ',substring(pipeline().parameters.date2run,0 ,4 ),'-3\n    and ch.comp_baseyear <= ',substring(pipeline().parameters.date2run,0 ,4 ))",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_KRAM_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_KRAM_Models",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string",
						"defaultValue": "KRAM_TRADER_MODEL"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/KRAM_TRADER_MODEL/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_KRAM_Models')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_LC_BG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_STG_VIEW_KMB_BG_INVOK_OS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.partitionValue,'-','')",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_STG_VIEW_KMB_BG_INVOK_OS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select * from \"STG\".\"STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS\" where DATEFORMAT(AS_ON_DATE, ''yyyymmdd'') = ''',replace(pipeline().parameters.partitionValue,'-',''),'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@replace(pipeline().parameters.partitionValue,'-','')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_LC_DEVELOP_REPORT",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.partitionValue,'-','')",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_LC_DEVELOP_REPORT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select * from \"STG\".\"STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT\" where DATEFORMAT(AS_ON_DATE, ''yyyymmdd'') = ''',replace(pipeline().parameters.partitionValue,'-',''),'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@replace(pipeline().parameters.partitionValue,'-','')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"Blob_File_Path_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS": {
						"type": "String",
						"defaultValue": "MISYS/STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS/load_date="
					},
					"Blob_File_Path_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT": {
						"type": "String",
						"defaultValue": "MISYS/STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT/load_date="
					}
				},
				"folder": {
					"name": "stg2landingBrd2"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-16T10:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS')]",
				"[concat(variables('factoryId'), '/datasets/csv_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT')]",
				"[concat(variables('factoryId'), '/datasets/csv_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_LOS_BL_CONSUMER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LOS_BL_CONSUMER",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select LOAN_NUM,CRN,INCOME_HEADCODE,ISRLNO,Total_Income AS Turnover,Sources_of_Working_capital AS Working_Capital_Borrowings_Short_Term_Borrowing,\nClosing_stock AS Inventory,Debtors AS Receivables,Cash_bank_Balances AS Cash_Cash_equivalent,\nLong_term_Debts_Secured+Long_term_Debts_Unsecured+Sources_of_Working_capital AS Total_borrowings,\nLoans_Advances+Advance_tax_Tax_deducted_at_source  AS Other_Current_Assets,\nLong_term_Debts_Secured_1,Long_term_Debts_Unsecured_1,Debtors_1 AS Receivables_1,Cash_bank_Balances_1 AS Cash_Cash_equivalent_1,\nAdvance_tax_Tax_deducted_at_source_1,\nTotal_Income_1 AS Turnover_1\nfrom (\nselect DISTINCT T1.SZLOANAPPLNNO AS LOAN_NUM,T2.SZREFERENCENO as CRN,T1.SZINCOMEHEADCODE AS INCOME_HEADCODE,T1.ISRLNO,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLB34','DLB35','DLB36') THEN T1.FVALUE END) AS Total_Income,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU34','DLU35','DLU36') THEN T1.FVALUE END) AS Long_term_Debts_Secured,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU37','DLU38','DLU39') THEN T1.FVALUE END) AS Long_term_Debts_Unsecured,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU61','DLU62','DLU63') THEN T1.FVALUE END) AS Closing_stock,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU64','DLU65','DLU66') THEN T1.FVALUE END) AS Debtors,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU67','DLU68','DLU69') THEN T1.FVALUE END) AS Loans_Advances,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU70','DLU71','DLU72') THEN T1.FVALUE END) AS Cash_bank_Balances,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU73','DLU74','DLU75') THEN T1.FVALUE END) AS Advance_tax_Tax_deducted_at_source,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('DLU94','DLU95','DLU96') THEN T1.FVALUE END) AS Sources_of_Working_capital,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('U34','U35','U36') THEN T1.FVALUE END) AS Long_term_Debts_Secured_1,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('U37','U38','U39') THEN T1.FVALUE END) AS Long_term_Debts_Unsecured_1,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('U64','U65','U66') THEN T1.FVALUE END) AS Debtors_1,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('U67','U68','U69') THEN T1.FVALUE END) AS Loans_Advances_1,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('U70','U71','U72') THEN T1.FVALUE END) AS Cash_bank_Balances_1,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('U73','U74','U75') THEN T1.FVALUE END) AS Advance_tax_Tax_deducted_at_source_1,\n(CASE WHEN T1.SZINCOMEHEADCODE IN ('WC6A13','WC6A14','WC6A15') THEN T1.FVALUE END) AS Total_Income_1\n\nfrom STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T1 LEFT JOIN STG.STG_LOS_TR_APPLICATIONWORKDETAILS T2 ON T1.SZLOANAPPLNNO=T2.SZLOANAPPLNNO\nwhere T1.ETL_CHANGE_FLAG<>'D' and T2.ETL_CHANGE_FLAG<>'D' AND T1.SZLOANAPPLNNO LIKE 'BL%'\nand T1.SZINCOMEHEADCODE IN ('DLB34','DLB35','DLB36','DLU34','DLU35','DLU36','DLU37','DLU38','DLU39','DLU61','DLU62','DLU63','DLU64','DLU65','DLU66',\n'DLU67','DLU68','DLU69','DLU70','DLU71','DLU72','DLU73','DLU74','DLU75','DLU94','DLU95','DLU96','U34','U35','U36','U37','U38','U39','U64','U65','U66',\n'U67','U68','U69','U70','U71','U72','U73','U74','U75','WC6A13','WC6A14','WC6A15')\nAND T2.SZPARTYTYPE='BORROWER')A"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_LOS_BL_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_LOS_BL_CONSUMER",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_BL_CONSUMER/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T13:09:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_LOS_BL_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_LOS_BL_CONSUMER')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_LOS_BL_FINANCIAL_RATIOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LOS_BL_FINANCIAL_RATIOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select DISTINCT * into #aa from (\nselect  T1.SZLOANAPPLNNO as LOAN_NUMBER,T1.SZRM AS RM_CODE,T2.SZREFERENCENO AS PARTY_ID,T1.FTOTLOANAMT AS OFFER_LOAN_AMOUNT,\n--T4.FAGREEMENTVALUE AS AGREEMENTVALUE,\n--T5.FSANCTION_LTV_1 AS LTV1,T5.FSANCTION_LTV_2 as LTV2,\nT2.CINDCOMP AS INDIVIDUAL_ORGANISATION,\nT2.SZFNAME AS FIRST_NAME,T2.SZMNAME AS MIDDLE_NAME,T2.SZLNAME as LAST_NAME,T2.SZPARTYTYPE AS PARTY_TYPE,\nT1.ETL_LAST_UPDATED_TIME AS LOAN_NUMBER_ETL_LAST_UPDATED_TIME,\nT1.ETL_LAST_UPDATED_TIME AS RM_CODE_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS PARTY_ID_ETL_LAST_UPDATED_TIME,\nT1.ETL_LAST_UPDATED_TIME AS OFFER_LOAN_AMOUNT_ETL_LAST_UPDATED_TIME,\n--T4.ETL_LAST_UPDATED_TIME AS AGREEMENTVALUE_ETL_LAST_UPDATED_TIME,\n--T5.ETL_LAST_UPDATED_TIME AS LTV1_ETL_LAST_UPDATED_TIME,\n--T5.ETL_LAST_UPDATED_TIME AS LTV2_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS INDIVIDUAL_ORGANISATION_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS FIRST_NAME_ETL_LAST_UPDATED_TIME,   \nT2.ETL_LAST_UPDATED_TIME AS MIDDLE_NAME_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS LAST_NAME_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS PARTY_TYPE_ETL_LAST_UPDATED_TIME\nfrom STG.STG_LOS_TR_LOANAPPLICATIONDETAILS T1\nLEFT JOIN STG.STG_LOS_TR_APPLICATIONWORKDETAILS T2 ON T1.SZLOANAPPLNNO=T2.SZLOANAPPLNNO\nLEFT JOIN STG.STG_BCIF_PARTY_FINANCIALS T3 ON T2.SZREFERENCENO=T3.PARTY_ID\n--LEFT JOIN STG.STG_LOS_TR_REQUEST T4 ON T1.SZLOANAPPLNNO=T4.SZLOANAPPLNNO\n--LEFT JOIN STG.STG_LOS_TR_CASE_BOUNDARIES T5 ON T1.SZLOANAPPLNNO=T5.SZLOANAPPLNNO \nwhere (PARTY_ID is not null or PARTY_ID!='')  and --(AGREEMENTVALUE is not null or AGREEMENTVALUE is null) and \nRM_CODE!='' and T1.ETL_CHANGE_FLAG <> 'D' and T2.ETL_CHANGE_FLAG <> 'D' and T3.ETL_CHANGE_FLAG <> 'D' and --T4.ETL_CHANGE_FLAG <> 'D' and\n--T5.ETL_CHANGE_FLAG <> 'D' and \nT2.SZPARTYTYPE in ('BORROWER','COBORROWER','GUARANTOR','SRL') \n--and T1.SZLOANAPPLNNO in ('BL14783790','BL19163469','BL18320355','BL19450793')\n)a\n\n--NETWORTH\nselect * into #bb from (\nselect T1.*,T2.FVALUE AS NETWORTH,T2.ETL_LAST_UPDATED_TIME AS NETWORTH_ETL_LAST_UPDATED_TIME \nfrom #aa T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U22'))a\n\n--DEBTORS\nselect * into #cc from (\nselect T1.*,T2.FVALUE AS DEBTORS,T2.ETL_LAST_UPDATED_TIME AS DEBTORS_ETL_LAST_UPDATED_TIME \nfrom #bb T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U64'))a\n\n--CREDITORS\nselect * into #dd from (\nselect T1.*,T2.FVALUE AS CREDITORS,T2.ETL_LAST_UPDATED_TIME AS CREDITORS_ETL_LAST_UPDATED_TIME \nfrom #cc T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U79'))a\n\n--LOANS_ADVANCES\nselect * into #ee from (\nselect T1.*,T2.FVALUE AS LOANS_ADVANCES,T2.ETL_LAST_UPDATED_TIME AS LOANS_ADVANCES_ETL_LAST_UPDATED_TIME \nfrom #dd T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U67'))a\n\n--INVESTMENTS_DEPOSITS\nselect * into #ff from (\nselect T1.*,T2.FVALUE AS INVESTMENTS_DEPOSITS,T2.ETL_LAST_UPDATED_TIME AS INVESTMENTS_DEPOSITS_ETL_LAST_UPDATED_TIME from #ee T1 \nLEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U55'))a\n\n--TOTAL_INCOME\nselect * into #gg from (\nselect T1.*,T2.FVALUE AS TOTAL_INCOME,T2.ETL_LAST_UPDATED_TIME AS TOTAL_INCOME_ETL_LAST_UPDATED_TIME \nfrom #ff T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('B34'))a\n\nselect distinct * from #gg\n\n"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_LOS_BL_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_LOS_BL_FR",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_BL_FINANCIAL_RATIOS/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-22T11:33:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_LOS_BL_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_LOS_BL_FR')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_LOS_Commercial_Financial')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LOS commerical financial:\nList out parameter:\n--Turnover\n--Debtors_For_Current_Receivables\n--Debtors_For_Receivables_More_Than_6M\n--Creditors\n--Networth\n--LTV\n--Investment_And_Advances_To_Group_Companies\n--Group Companies\n--Adjusted_Tangible_Net_Worth_ATNW\n--RELATED PARTY DATA",
				"activities": [
					{
						"name": "Turnover_Query_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Turnover_Delete_if_Exists_load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS Turnover\n\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=6548 OR LFD.LFD_FIN_ROW_ID=513550 OR LFD.LFD_FIN_ROW_ID=513630 OR LFD.LFD_FIN_ROW_ID=6558) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND LFD.LFD_YEAR_3 AND LFD.LFD_YEAR_4 AND LFD.LFD_YEAR_5\n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Turnover_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Turnover_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Debtors_For_Current_Receivables_Query_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Debtors_For_Current_IF_Delete_Exists_load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "\n(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS   \nDebtors_For_Current_Receivables\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=6835 OR LFD.LFD_FIN_ROW_ID=513588 OR LFD.LFD_FIN_ROW_ID=513669 OR LFD.LFD_FIN_ROW_ID=6836) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Debtors_For_Current_Receivables_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Debtors_For_Current_Receivables_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Debtors_For_Receivables_More_Than_6M_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Debtors_For_Receivables_More_Than_6M_IF_Delete_Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS Debtors_For_Receivables_More_Than_6M\n\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=6902 OR LFD.LFD_FIN_ROW_ID=513577 OR LFD.LFD_FIN_ROW_ID=513658) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Debtors_For_Receivables_More_Than_6M_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Debtors_For_Receivables_More_Than_6M_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Creditors_Query_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Creditors_IF_Delete_Exists_Load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS Creditors\n\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=6746 OR LFD.LFD_FIN_ROW_ID=513594 OR LFD.LFD_FIN_ROW_ID=513675) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Creditors_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Creditors_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Networth_Query_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Networth_IF_Delete_Exists_Load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS Networth\n\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=7061 OR LFD.LFD_FIN_ROW_ID=513574 OR LFD.LFD_FIN_ROW_ID=513655) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Networth_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Networth_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Investment_And_Advances_To_Group_Companies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Investment_And_Advances_IF_Delete_Exists_Load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS Investment_And_Advances_To_Group_Companies\n\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=6897 OR LFD.LFD_FIN_ROW_ID=513576 OR LFD.LFD_FIN_ROW_ID=513657) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Investment_And_Advances_To_Group_Companies_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Investment_And_Advances_To_Group_Companies_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Group_by_companies_Query_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Group_By_Companies_IF_Delete_Exists_Load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(SELECT LCI1.LCI_CUST_NAME AS CUSTNAME,LCI1.LCI_BCIF_NO AS BCIF_NO  FROM \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP1 \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI1 ON LCI1.LCI_NEW_ID=LPP1.LPP_CUST_ID_NEW \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP1.LPP_PROP_NO\n    WHERE  LCI1.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI1.LCI_RECENT = 'Y' \n    AND LPP1.LPP_PROP_NO=LP.LP_PROP_NO AND LPP1.LPP_CUST_TYPE='N')\n"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Group_By_Companies_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Group_BY_Companies_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Adjusted_Tangible_Net_Worth_ATNW_Sybase_To_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Adjusted_Tangible_Networth_IF_Delete_Exists_Load_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "(select LCI.LCI_BCIF_NO AS BCIF_NO,\n    LCI.LCI_CUST_NAME AS NAME,\n    (CASE WHEN LFD_YEAR_SEQ_NO=3 THEN LFD_YEAR_3 WHEN LFD_YEAR_SEQ_NO=4 THEN LFD_YEAR_4 WHEN LFD_YEAR_SEQ_NO=5 THEN LFD_YEAR_5  ELSE 0 END)/10000000 AS Adjusted_Tangible_Net_Worth_ATNW\n\nFROM \"STG\".\"STG_LENDDB_LPCOM_CUST_INFO\"  LCI INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROP_PARTIES\" LPP ON LPP.LPP_CUST_ID_NEW = LCI.LCI_NEW_ID \n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_PROPOSAL\" LP ON LP.LP_PROP_NO = LPP.LPP_PROP_NO\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DATA\" LFD ON LFD.LFD_CUST_NEW_ID = LCI.LCI_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPCOM_FIN_DETAILS\" LFDS ON LFD.LFD_CMA_NO=LFDS.LFD_CMA_NO AND LFD.LFD_CUST_NEW_ID = LFDS.LFD_CUST_NEW_ID\n    INNER JOIN \"STG\".\"STG_LENDDB_LPSTP_FINMASTER\" LFM ON LFM.FIN_ROW_ID = LFD.LFD_FIN_ROW_ID\n    WHERE (LFD.LFD_FIN_ROW_ID=7066 OR LFD.LFD_FIN_ROW_ID=513578 OR LFD.LFD_FIN_ROW_ID=513659) AND LFDS.LFD_AUDIT_TYPE='A' AND LFD.LFD_CUST_NEW_ID=LCI.LCI_NEW_ID AND LFDS.LFD_FIN_PAGE = 'FI' \n--AND (LFD_YEAR_SEQ_NO = 3 OR LFD_YEAR_SEQ_NO = 4 OR LFD_YEAR_SEQ_NO = 5)\nAND (LFD_YEAR_SEQ_NO = 4 )\nAND LCI.LCI_BCIF_NO IN ('353340260','68587054','68588872','235871246','238747057','240330893','84059532','84321420','48319078','58358561','29476556','87312352') AND LCI.LCI_RECENT = 'Y' \nORDER By LFDS.LFD_END_DATE DESC)"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Sybase_Adjusted_Tangible_Net_Worth_ATNW_Query_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LOS_Commercial_Financial_Blob_Adjusted_Tangible_Net_Worth_ATNW_Query_Destination",
								"type": "DatasetReference",
								"parameters": {
									"load_date": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Turnover_Delete_if_Exists_load_date",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Turnover_Blob_Path')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Debtors_For_Current_IF_Delete_Exists_load_date",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Turnover_Query_Sybase_To_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Debtors_For_Current_Receivables')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Debtors_For_Receivables_More_Than_6M_IF_Delete_Exists",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Debtors_For_Current_Receivables_Query_Sybase_To_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Debtors_For_Current_Receivables_More_Than_6M')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Creditors_IF_Delete_Exists_Load_date",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Debtors_For_Receivables_More_Than_6M_Sybase_To_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('creditors')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Networth_IF_Delete_Exists_Load_date",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Creditors_Query_Sybase_To_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Networth')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Investment_And_Advances_IF_Delete_Exists_Load_date",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Networth_Query_Sybase_To_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Investment_And_Advances')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Group_By_Companies_IF_Delete_Exists_Load_date",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Investment_And_Advances_To_Group_Companies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Group_By_Companies')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Adjusted_Tangible_Networth_IF_Delete_Exists_Load_date",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Group_by_companies_Query_Sybase_To_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Adjusted_Tangible_Networth_IF_Delete_Exists_Load_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Turnover_Blob_Path": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_TURNOVER/load_date="
					},
					"Debtors_For_Current_Receivables": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_DEBTORS_FOR_CURRENT_RECEIVABLES/load_date="
					},
					"Debtors_For_Current_Receivables_More_Than_6M": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_DEBTORS_FOR_RECEIVABLES_MORE_THAN_6M/load_date="
					},
					"creditors": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_CREDITORS/load_date="
					},
					"Networth": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_NETWORTH/load_date="
					},
					"Investment_And_Advances": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_INVESTMENT_AND_ADVANCES_TO_GROUP_COMPANIES/load_date="
					},
					"Group_By_Companies": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_GROUP_BY_COMPANIES/load_date="
					},
					"Adjusted_Tangible_Networth_IF_Delete_Exists_Load_date": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_ADJUSTED_TANGIBLE_NET_WORTH_ATNM/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-04T04:31:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Turnover_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Turnover_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Debtors_For_Current_Receivables_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Debtors_For_Current_Receivables_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Debtors_For_Receivables_More_Than_6M_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Debtors_For_Receivables_More_Than_6M_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Creditors_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Creditors_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Networth_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Networth_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Investment_And_Advances_To_Group_Companies_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Investment_And_Advances_To_Group_Companies_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Group_By_Companies_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Group_BY_Companies_Query_Destination')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Sybase_Adjusted_Tangible_Net_Worth_ATNW_Query_Source')]",
				"[concat(variables('factoryId'), '/datasets/LOS_Commercial_Financial_Blob_Adjusted_Tangible_Net_Worth_ATNW_Query_Destination')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_LOS_HL_LP_RH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stag2landing_LOS_HL_LP_RH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select DISTINCT * into #aa from (\nselect  T1.SZLOANAPPLNNO as LOAN_NUMBER,T1.SZRM AS RM_CODE,T2.SZREFERENCENO AS PARTY_ID,T1.FTOTLOANAMT AS OFFER_LOAN_AMOUNT,\nT4.FAGREEMENTVALUE AS AGREEMENTVALUE,T5.FSANCTION_LTV_1 AS LTV1,T5.FSANCTION_LTV_2 as LTV2,T2.CINDCOMP AS INDIVIDUAL_ORGANISATION,\nT2.SZFNAME AS FIRST_NAME,T2.SZMNAME AS MIDDLE_NAME,T2.SZLNAME as LAST_NAME,T2.SZPARTYTYPE AS PARTY_TYPE,\nT1.ETL_LAST_UPDATED_TIME AS LOAN_NUMBER_ETL_LAST_UPDATED_TIME,\nT1.ETL_LAST_UPDATED_TIME AS RM_CODE_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS PARTY_ID_ETL_LAST_UPDATED_TIME,\nT1.ETL_LAST_UPDATED_TIME AS OFFER_LOAN_AMOUNT_ETL_LAST_UPDATED_TIME,\nT4.ETL_LAST_UPDATED_TIME AS AGREEMENTVALUE_ETL_LAST_UPDATED_TIME,\nT5.ETL_LAST_UPDATED_TIME AS LTV1_ETL_LAST_UPDATED_TIME,\nT5.ETL_LAST_UPDATED_TIME AS LTV2_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS INDIVIDUAL_ORGANISATION_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS FIRST_NAME_ETL_LAST_UPDATED_TIME,   \nT2.ETL_LAST_UPDATED_TIME AS MIDDLE_NAME_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS LAST_NAME_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS PARTY_TYPE_ETL_LAST_UPDATED_TIME\nfrom STG.STG_LOS_TR_LOANAPPLICATIONDETAILS T1\nLEFT JOIN STG.STG_LOS_TR_APPLICATIONWORKDETAILS T2 ON T1.SZLOANAPPLNNO=T2.SZLOANAPPLNNO\nLEFT JOIN STG.STG_BCIF_PARTY_FINANCIALS T3 ON T2.SZREFERENCENO=T3.PARTY_ID\nLEFT JOIN STG.STG_LOS_TR_REQUEST T4 ON T1.SZLOANAPPLNNO=T4.SZLOANAPPLNNO\nLEFT JOIN STG.STG_LOS_TR_CASE_BOUNDARIES T5 ON T1.SZLOANAPPLNNO=T5.SZLOANAPPLNNO \nwhere (PARTY_ID is not null or PARTY_ID!='')  and (AGREEMENTVALUE is not null or AGREEMENTVALUE is null) and RM_CODE!='' and \nT1.ETL_CHANGE_FLAG <> 'D' and T2.ETL_CHANGE_FLAG <> 'D' and T3.ETL_CHANGE_FLAG <> 'D' and T4.ETL_CHANGE_FLAG <> 'D' and\nT5.ETL_CHANGE_FLAG <> 'D' and T2.SZPARTYTYPE in ('BORROWER','COBORROWER','GUARANTOR','SRL') \n-- and T1.SZLOANAPPLNNO in ('HL13259748','HL14182065','HL14913975','LP13936765','LP13946292','LP14202962','LP14636325','LP14711787','LP14887084','LP14903883','RH13750133')\n)a\n\n--NETWORTH\nselect * into #bb from (\nselect T1.*,T2.FVALUE AS NETWORTH,T2.ETL_LAST_UPDATED_TIME AS NETWORTH_ETL_LAST_UPDATED_TIME \nfrom #aa T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('HLL38'))a\n\n--DEBTORS\nselect * into #cc from (\nselect T1.*,T2.FVALUE AS DEBTORS,T2.ETL_LAST_UPDATED_TIME AS DEBTORS_ETL_LAST_UPDATED_TIME \nfrom #bb T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U64'))a\n\n--CREDITORS\nselect * into #dd from (\nselect T1.*,T2.FVALUE AS CREDITORS,T2.ETL_LAST_UPDATED_TIME AS CREDITORS_ETL_LAST_UPDATED_TIME \nfrom #cc T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U79'))a\n\n--LOANS_ADVANCES\nselect * into #ee from (\nselect T1.*,T2.FVALUE AS LOANS_ADVANCES,T2.ETL_LAST_UPDATED_TIME AS LOANS_ADVANCES_ETL_LAST_UPDATED_TIME \nfrom #dd T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U67'))a\n\n--INVESTMENTS_DEPOSITS\nselect * into #ff from (\nselect T1.*,T2.FVALUE AS INVESTMENTS_DEPOSITS,T2.ETL_LAST_UPDATED_TIME AS INVESTMENTS_DEPOSITS_ETL_LAST_UPDATED_TIME from #ee T1 \nLEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('U55'))a\n\n--TOTAL_INCOME\nselect * into #gg from (\nselect T1.*,T2.FVALUE AS TOTAL_INCOME,T2.ETL_LAST_UPDATED_TIME AS TOTAL_INCOME_ETL_LAST_UPDATED_TIME \nfrom #ff T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO\nand T2.SZINCOMEHEADCODE in ('HLL13'))a\n\nselect distinct * from #gg\n"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_LOS_HL_LP_RH",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_LOS_HL_LP_RH",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_HL_LP_RH/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T12:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_LOS_HL_LP_RH')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_LOS_HL_LP_RH')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_LOS_WC_FINANCIAL_RATIOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LOS_WC_FINANCIAL_RATIOS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select DISTINCT * into #aa from (\nselect  T1.SZLOANAPPLNNO as LOAN_NUMBER,T1.SZRM AS RM_CODE,T2.SZREFERENCENO AS PARTY_ID,T1.FTOTLOANAMT AS OFFER_LOAN_AMOUNT,\nT5.FSANCTION_LTV_1 AS LTV1,T5.FSANCTION_LTV_2 as LTV2,T2.CINDCOMP AS INDIVIDUAL_ORGANISATION,\nT2.SZFNAME AS FIRST_NAME,T2.SZMNAME AS MIDDLE_NAME,T2.SZLNAME as LAST_NAME,T2.SZPARTYTYPE AS PARTY_TYPE,\nT1.ETL_LAST_UPDATED_TIME AS LOAN_NUMBER_ETL_LAST_UPDATED_TIME,\nT1.ETL_LAST_UPDATED_TIME AS RM_CODE_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS PARTY_ID_ETL_LAST_UPDATED_TIME,\nT1.ETL_LAST_UPDATED_TIME AS OFFER_LOAN_AMOUNT_ETL_LAST_UPDATED_TIME,\nT5.ETL_LAST_UPDATED_TIME AS LTV1_ETL_LAST_UPDATED_TIME,\nT5.ETL_LAST_UPDATED_TIME AS LTV2_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS INDIVIDUAL_ORGANISATION_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS FIRST_NAME_ETL_LAST_UPDATED_TIME,   \nT2.ETL_LAST_UPDATED_TIME AS MIDDLE_NAME_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS LAST_NAME_ETL_LAST_UPDATED_TIME,\nT2.ETL_LAST_UPDATED_TIME AS PARTY_TYPE_ETL_LAST_UPDATED_TIME\nfrom STG.STG_LOS_TR_LOANAPPLICATIONDETAILS T1\nLEFT JOIN STG.STG_LOS_TR_APPLICATIONWORKDETAILS T2 ON T1.SZLOANAPPLNNO=T2.SZLOANAPPLNNO\nLEFT JOIN STG.STG_BCIF_PARTY_FINANCIALS T3 ON T2.SZREFERENCENO=T3.PARTY_ID\nLEFT JOIN STG.STG_LOS_TR_CASE_BOUNDARIES T5 ON T1.SZLOANAPPLNNO=T5.SZLOANAPPLNNO \nwhere (PARTY_ID is not null or PARTY_ID!='')  and RM_CODE!='' and \nT1.ETL_CHANGE_FLAG <> 'D' and T2.ETL_CHANGE_FLAG <> 'D' and T3.ETL_CHANGE_FLAG <> 'D' and\nT5.ETL_CHANGE_FLAG <> 'D' and T2.SZPARTYTYPE in ('BORROWER','COBORROWER','GUARANTOR','SRL') \n--and T1.SZLOANAPPLNNO in ('WC15929316','WC15936687','WC15948129','WC15968269','WC15977358','WC15979176','WC15979539','WC15984498','WC15984692','WC16015542')\n)a\n\n\n--NETWORTH\nselect * into #bb from (\nselect T1.*,T2.FVALUE AS NETWORTH,T2.ETL_LAST_UPDATED_TIME AS NETWORTH_ETL_LAST_UPDATED_TIME \nfrom #aa T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO and T2.ETL_CHANGE_FLAG <> 'D'\nand T2.SZINCOMEHEADCODE in ('WC6A38','WCINS37'))a\n\n--TOTAL_INCOME\nselect * into #cc from (\nselect T1.*,T2.FVALUE AS TOTAL_INCOME,T2.ETL_LAST_UPDATED_TIME AS TOTAL_INCOME_ETL_LAST_UPDATED_TIME \nfrom #bb T1 LEFT JOIN STG.STG_LOS_TR_ELG_APPLICANTINCOMEHEADER T2 ON T1.LOAN_NUMBER=T2.SZLOANAPPLNNO and T2.ETL_CHANGE_FLAG <> 'D'\nand T2.SZINCOMEHEADCODE in ('WC6A13','WCINS12'))a\n\n\nselect DISTINCT * from #cc\n"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 200000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_LOS_WC_FINANCIAL_RATIOS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_LOS_WC_FR",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/LOS_WC_FINANCIAL_RATIOS/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2024-09-14T10:05:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_LOS_WC_FINANCIAL_RATIOS')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_LOS_WC_FR')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_NPA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECK_BLOB_LOAD_DATE_EXISTS_STG_IDB_VW_DIM_ACCTS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.partitionValue,'-','')",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_NPA_DATA')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "STG-STG_IDB_VW_DIM_ACCTS_ARCHIVE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_LOAD_DATE_EXISTS_STG_IDB_VW_DIM_ACCTS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('SELECT * FROM\nSTG.STG_IDB_VW_DIM_ACCTS_ARCHIVE\nWHERE\nDPD BETWEEN 6 AND 90\nAND DATEFORMAT(REPORT_DATE, ''yyyy-MM-dd'')  BETWEEN ''',  startOfMonth(subtractFromTime(pipeline().parameters.partitionValue, 1, 'MONTH'),'yyyy-MM-dd'),''' AND ''', subtractFromTime(pipeline().parameters.partitionValue, 1, 'DAY','yyyy-MM-dd'), '''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_STG_IDB_VW_DIM_ACCTS_ARCHIVE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_STG_IDB_VW_DIM_ACCTS_ARCHIVE",
								"type": "DatasetReference",
								"parameters": {
									"partitionValue": {
										"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"variables": {
					"Blob_File_Path_NPA_DATA": {
						"type": "String",
						"defaultValue": "NPA_DATA/STG.STG_IDB_VW_DIM_ACCTS_ARCHIVE/load_date="
					}
				},
				"folder": {
					"name": "stg2landingBrd2"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-22T07:37:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]",
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_STG_IDB_VW_DIM_ACCTS_ARCHIVE')]",
				"[concat(variables('factoryId'), '/datasets/csv_STG_IDB_VW_DIM_ACCTS_ARCHIVE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_Neft')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STG-STG_NEFT_NEFT_INWARD_PAYMENT_TRANS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_PARTITION_EXISTS_NEFT_INWARD_PAYMENT_TRANS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select \nNEFT.SEQ_NO,\nNEFT.A4_2020 AS TRANSACTION_REF,\nNEFT.A4_2006 AS RELATED_REFERENCE,\nNEFT.A4_5756 AS SENDER_IFSC,\nNEFT.A4_6305 AS SENDER_AC_TYPE,\nNEFT.A4_6021 AS SENDER_ACC_NO,\nNEFT.A4_6091 AS SENDER_NAME,\nNEFT.AMOUNT,\nNEFT.A4_3380 AS VALUE_DATE,\nNEFT.A4_3375 AS REMIT_DATE,\nNEFT.A4_HEADER_3535 AS BATCH_NUMBER,\nNEFT.A4_5569 AS BENEFICIARY_IFSC,\nNEFT.A4_6310 AS BENEFICIARY_AC_TYPE,\nNEFT.APAC AS BENEFICIARY_AC_NO,\nNEFT.A4_6081 AS BENEFICIARY_NAME,\nNEFT.A4_6346 AS RETURN_CODE,\nNEFT.A4_6366 AS RETURN_REASON,\nNEFT.A4_7002 AS ORIGINATOR_REMITTANCE,\nNEFT.A4_7495 AS SENDER_TO_RECEIVER_INFO,\nGAM.CIF_ID,\nGAM.SCHM_TYPE\nfrom STG.STG_NEFT_NEFT_INWARD_PAYMENT_TRANS NEFT\nINNER JOIN STG.STG_FINACLE_GAM  GAM\non NEFT.APAC = GAM.FORACID \nwhere \nGAM.SCHM_TYPE in (''CA'',''CCA'',''ODA'') and \nGAM.CIF_ID in \n(select distinct `BCIF_BANK Id` from STG.STG_GLEMS_MVIEW_FAC_DTLS where \n`Limit Suffix` in \n(''AJANT'',''ALKEM'',''BAIR'',''BANF'',''BC'',''BCCAP'',''BCCPX'',''BCCXP'',''BCD'',''BCL'',''BCLM'',''BCTL'',\n''BCWC'',''BG1'',''BG2'',''BG3'',''BG4'',''BGADH'',''BGBBD'',''BGFIN'',''BGLIM'',''BGPER'',''BGR2'',''BILLL'',\n''BLUEC'',''BUCR'',''BURCR'',''BUYCD'',''BUYCR'',''BUYER'',''BUYRC'',''BYCR'',''CADIL'',''CAPEX'',''CAPLC'',\n''CBDST'',''CC'',''CCOD'',''CHAN'',''CLNBI'',''CLNBL'',''CVVJK'',''DBAC1'',''DBAC2'',''DBAC5'',''DBDAC'',\n''DBDDW'',''DOMBD'',''DRWR'',''EBDMM'',''EBDTA'',''EBDTM'',''EBDTT'',''EBDVE'',''EPC'',''EPC1'',''EPC2'',\n''EPCCR'',''EPCFC'',''FACTO'',''FBD'',''FBN'',''FBP'',''FBP2'',''FBPAD'',''FDCLT'',''FLCIN'',''FRGNA'',\n''FRGNB'',''IDEA'',''ILCFL'',''IMCLR'',''IMSTR'',''INBAL'',''INDIS'',''INHHM'',''INMNM'',''INMUL'',\n''INOT1'',''INOT2'',''INOT3'',''INOT4'',''INOT6'',''INTAF'',''INTAS'',''INVAD'',''INVDF'',''INVDI'',\n''INVFI'',''INVO'',''INVPU'',''KCCL'',''LALOU'',''LC'',''LCBD'',''LCBDC'',''LCBDL'',''LCBDS'',''LCBL'',\n''LCCAP'',''LCCP1'',''LCCP2'',''LCCPX'',''LCFBL'',''LCIBL'',''LCIMP'',''LCIND'',''LCLIM'',''LCNPB'',\n''LCNSB'',''LCPBD'',''LCPXF'',''LCPXI'',''LCSBD'',''LCWC'',''LCWCF'',''LCWCI'',''LOTML'',''LOU'',''MEDLE'',\n''MICRO'',''MULDI'',''NICHO'',''OD'',''ODFD'',''ODHAN'',''PBD1'',''PBD2'',''PBUY1'',''PBUY2'',''PBUY3'',\n''PBUY4'',''PC'',''PCFC1'',''PCFC2'',''PCFCI'',''PCFCL'',''PCFCN'',''PCFCR'',''PCFCY'',''PCFRN'',''PCINR'',\n''PCLI'',''PCLIM'',''PCRUP'',''PCWC'',''PION'',''POBAL'',''POFUN'',''POHOS'',''POMNM'',''POMUL'',''POONA'',\n''POTML'',''PSC'',''PSCFC'',''PSCIN'',''PUR'',''PURC1'',''RECEV'',''RFACT'',''SBD1'',''SBD11'',''SBD2'',''SBD3'',\n''SBD4'',''SBD5'',''SBD6'',''SBDAL'',''SBDB'',''SBDCE'',''SBDGB'',''SBDMM'',''SBDS'',''SBDTM'',''SBLC'',''SBLCB'',\n''SBLCI'',''SBLCM'',''SBLCY'',''SIF'',''SPENG'',''STL'',''STLAD'',''STLCP'',''STLFC'',''STLL'',''STLLI'',''STLWD'',\n''SUNPH'',''SUPL'',''SUPP'',''TATA'',''TCD'',''TREDS'',''VAPIP'',''WCCLI'',''WCDL'',''WCDL2'',''WCDLA'',''WCDLD'',''WCDLM''))\nand\nA4_3380=''',replace(pipeline().parameters.partitionValue, '-', ''),'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_NeftRtgs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_NEFT",
								"type": "DatasetReference",
								"parameters": {
									"partitiondate": {
										"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
										"type": "Expression"
									},
									"NeftTable": "NEFT_INWARD_PAYMENT",
									"loaddate": {
										"value": "@replace(pipeline().parameters.loadDate, '-', '')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_PARTITION_EXISTS_NEFT_INWARD_PAYMENT_TRANS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Partition_Exists_Delete_Activity_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.loadDate, '-', '')",
									"type": "Expression"
								},
								"date2runm1": {
									"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
									"type": "Expression"
								},
								"Blob_File_path": {
									"value": "@variables('Blob_File_Path_NEFT_INWARD_PAYMENT_TRAN')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CHECK_PARTITION_EXISTS_NEFT_OUTWARD_PAYMENT",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "STG-STG_NEFT_NEFT_INWARD_PAYMENT_TRANS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Partition_Exists_Delete_Activity_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.loadDate, '-', '')",
									"type": "Expression"
								},
								"date2runm1": {
									"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
									"type": "Expression"
								},
								"Blob_File_path": {
									"value": "@variables('Blob_File_Path_NEFT_OUTWARD_PAYMENT')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "NEFT_OUTWARD_PAYMENT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_PARTITION_EXISTS_NEFT_OUTWARD_PAYMENT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select UTR, c.tran_id,\nDATEFORMAT(c.tran_date, ''yyyyMMdd'') AS tran_date,\ntran_amt,ORD_PARTY_ACCT,\nORD_PARTY_NAME, ORD_PARTY_ADDR1,\nORD_PARTY_ADDR2,ORD_PARTY_ADDR3,\nRECEIVER_BIC,BENEF_PARTY_ACCT,\nBENEF_PARTY_NAME, BENEF_PARTY_ADDR1,\nBENEF_PARTY_ADDR2,BENEF_PARTY_ADDR3\nfrom STG.STG_FINACLE_PORH a,\nSTG.STG_FINACLE_PORD b,\nSTG.STG_FINACLE_SMH c\nwhere a.pymt_ref_num =  b.pymt_ref_num\nand a.pymt_ref_num = ROUTING_REF_NUM\nand c.IN_OUT_IND = ''O''\nand PAYSYS_ID = ''NEFT''\nand DATEFORMAT(execution_date, ''yyyy-MM-dd'') = ''',pipeline().parameters.partitionValue,'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_NeftRtgs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_NEFT",
								"type": "DatasetReference",
								"parameters": {
									"partitiondate": {
										"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
										"type": "Expression"
									},
									"NeftTable": "NEFT_OUTWARD_PAYMENT",
									"loaddate": {
										"value": "@replace(pipeline().parameters.loadDate, '-', '')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "yyyy-mm-dd"
					},
					"loadDate": {
						"type": "string",
						"defaultValue": "yyyy-mm-dd"
					}
				},
				"variables": {
					"Blob_File_Path_NEFT_INWARD_PAYMENT_TRAN": {
						"type": "String",
						"defaultValue": "NEFT/NEFT_INWARD_PAYMENT/load_date="
					},
					"Blob_File_Path_NEFT_OUTWARD_PAYMENT": {
						"type": "String",
						"defaultValue": "NEFT/NEFT_OUTWARD_PAYMENT/load_date="
					}
				},
				"folder": {
					"name": "stg2landing_NeftRtgs"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-09T13:54:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_NeftRtgs')]",
				"[concat(variables('factoryId'), '/datasets/csv_NEFT')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Partition_Exists_Delete_Activity_Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_RP_INPUT_TABLE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RP_INPUT_TABLE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": "select  * into #rp from (\nSELECT H.\"BCIF_BANK Id\" as BCIF_BANKID, \ncase when A.PARENT_CP_ID=B.CP_ID then B.COUNTERPARTY_NAME \nwhen A.PARENT_CP_ID=c.PARENT_CP_ID then c.COUNTERPARTY_NAME\nwhen D.PARENT_CP_ID=c.CP_ID then D.COUNTERPARTY_NAME\nwhen F.CP_ID=E.RELATED_COUNTERPARTY_ID then F.COUNTERPARTY_NAME\nwhen G.CP_ID=E.COUNTERPARTY_ID then G.COUNTERPARTY_NAME else 'others' end as RELATED_ENTITY_NAME, \ncase when A.PARENT_CP_ID=B.CP_ID then 'Group Entities' \nwhen A.PARENT_CP_ID=c.PARENT_CP_ID then 'Group Entities' \nwhen D.PARENT_CP_ID=c.CP_ID then 'Subsidiary'\nwhen F.CP_ID=E.RELATED_COUNTERPARTY_ID then 'Promoters'\nwhen G.CP_ID=E.COUNTERPARTY_ID then 'Directors' else 'others' end as RELATIONSHIP\nFROM STG.STG_GLEMS_MVIEW_CP_DTLS A \nLEFT JOIN STG.STG_GLEMS_MVIEW_CP_DTLS B ON A.PARENT_CP_ID=B.CP_ID\nLEFT JOIN STG.STG_GLEMS_MVIEW_CP_DTLS C ON A.PARENT_CP_ID=c.PARENT_CP_ID\nLEFT JOIN STG.STG_GLEMS_MVIEW_CP_DTLS D ON D.PARENT_CP_ID=c.CP_ID\nLEFT JOIN STG.STG_GLEMS_MVIEW_CP_RLTD_DTLS E ON E.COUNTERPARTY_ID=a.CP_ID\nLEFT JOIN STG.STG_GLEMS_MVIEW_CP_DTLS F ON F.CP_ID=E.RELATED_COUNTERPARTY_ID\nLEFT JOIN STG.STG_GLEMS_MVIEW_CP_DTLS G ON G.CP_ID=E.COUNTERPARTY_ID\nLEFT JOIN (select distinct \"BCIF_BANK Id\", \"CP ID\"  from STG.STG_GLEMS_MVIEW_FAC_DTLS) H on A.CP_ID = H.\"CP ID\"\n)a\n\nselect distinct * from #rp where RELATIONSHIP != 'others' and RELATED_ENTITY_NAME != 'others' and BCIF_BANKID != ''"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_RP_INPUT_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_Derived_rpinput",
								"type": "DatasetReference",
								"parameters": {
									"date2run": {
										"value": "@pipeline().parameters.date2run",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_BLOB_PARTITION_EXISTS_DELETE_AND_RECREATE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Load_date_wise_Delete_Activity_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.date2run",
									"type": "Expression"
								},
								"Blob_File_Path_Location": {
									"value": "@variables('Blob_File_Path_Location')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"variables": {
					"Blob_File_Path_Location": {
						"type": "String",
						"defaultValue": "DERIVED_DATASETS/RP_INPUT_TABLE/load_date="
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-11T12:58:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_RP_INPUT_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/csv_Derived_rpinput')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Load_date_wise_Delete_Activity_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stag2landing_RTGS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RTGS_INWARD_PAYMENT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_PARTITION_EXISTS_RTGS_INWARD_PAYMENT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select \nRTGS.MESSAGE_TYPE,\nRTGS.AMOUNT,\nRTGS.MSG_ID AS MESSAGE_IDENTIFIER,\nRTGS.UTR_NO AS TRANSACTION_ID,\nRTGS.END_TO_END_ID AS TRANSACTION_END_ID,\nRTGS.SENDER_ADDRESS AS DEBITOR_AGENT,\nRTGS.A4_5500 AS DEBITOR_ACCOUNT_AND_NAME,\nRTGS.A4_5516 AS DEBITOR_FININST_NAME,\nRTGS.RECEIVER_ADDRESS,\nRTGS.APAC AS CREDITOR_ACCOUNT,\nRTGS.A4_5561 AS CREDITOR_ACCOUNT_AND_NAME,\nRTGS.A4_6719 AS CREDITOR_FININST_NAME,\nRTGS.A4_7023 AS INSTITUTION_INFORMATION,\nRTGS.A4_7495 AS REMITTANCE_INFORMATION,\nreplace(RTGS.A4_4488_VALUE_DT, ''-'', '''') AS VALUE_DATE,\nRTGS.ORIGINATING_DATE AS SETTLEMENT_DATE,\nRTGS.ORIGINATING_TIME AS RECEIVED_TIME,\nGAM.CIF_ID,\nGAM.SCHM_TYPE\nfrom STG.STG_NEFT_RTGS_INWARD_PAYMENT_TRANS  RTGS\nINNER JOIN STG.STG_FINACLE_GAM  GAM\non RTGS.APAC = GAM.FORACID \nwhere \nGAM.SCHM_TYPE in (''CA'',''CCA'',''ODA'') and \nGAM.CIF_ID in \n(select distinct `BCIF_BANK Id` from STG.STG_GLEMS_MVIEW_FAC_DTLS where \n`Limit Suffix` in \n(''AJANT'',''ALKEM'',''BAIR'',''BANF'',''BC'',''BCCAP'',''BCCPX'',''BCCXP'',''BCD'',''BCL'',''BCLM'',''BCTL'',\n''BCWC'',''BG1'',''BG2'',''BG3'',''BG4'',''BGADH'',''BGBBD'',''BGFIN'',''BGLIM'',''BGPER'',''BGR2'',''BILLL'',\n''BLUEC'',''BUCR'',''BURCR'',''BUYCD'',''BUYCR'',''BUYER'',''BUYRC'',''BYCR'',''CADIL'',''CAPEX'',''CAPLC'',\n''CBDST'',''CC'',''CCOD'',''CHAN'',''CLNBI'',''CLNBL'',''CVVJK'',''DBAC1'',''DBAC2'',''DBAC5'',''DBDAC'',\n''DBDDW'',''DOMBD'',''DRWR'',''EBDMM'',''EBDTA'',''EBDTM'',''EBDTT'',''EBDVE'',''EPC'',''EPC1'',''EPC2'',\n''EPCCR'',''EPCFC'',''FACTO'',''FBD'',''FBN'',''FBP'',''FBP2'',''FBPAD'',''FDCLT'',''FLCIN'',''FRGNA'',\n''FRGNB'',''IDEA'',''ILCFL'',''IMCLR'',''IMSTR'',''INBAL'',''INDIS'',''INHHM'',''INMNM'',''INMUL'',\n''INOT1'',''INOT2'',''INOT3'',''INOT4'',''INOT6'',''INTAF'',''INTAS'',''INVAD'',''INVDF'',''INVDI'',\n''INVFI'',''INVO'',''INVPU'',''KCCL'',''LALOU'',''LC'',''LCBD'',''LCBDC'',''LCBDL'',''LCBDS'',''LCBL'',\n''LCCAP'',''LCCP1'',''LCCP2'',''LCCPX'',''LCFBL'',''LCIBL'',''LCIMP'',''LCIND'',''LCLIM'',''LCNPB'',\n''LCNSB'',''LCPBD'',''LCPXF'',''LCPXI'',''LCSBD'',''LCWC'',''LCWCF'',''LCWCI'',''LOTML'',''LOU'',''MEDLE'',\n''MICRO'',''MULDI'',''NICHO'',''OD'',''ODFD'',''ODHAN'',''PBD1'',''PBD2'',''PBUY1'',''PBUY2'',''PBUY3'',\n''PBUY4'',''PC'',''PCFC1'',''PCFC2'',''PCFCI'',''PCFCL'',''PCFCN'',''PCFCR'',''PCFCY'',''PCFRN'',''PCINR'',\n''PCLI'',''PCLIM'',''PCRUP'',''PCWC'',''PION'',''POBAL'',''POFUN'',''POHOS'',''POMNM'',''POMUL'',''POONA'',\n''POTML'',''PSC'',''PSCFC'',''PSCIN'',''PUR'',''PURC1'',''RECEV'',''RFACT'',''SBD1'',''SBD11'',''SBD2'',''SBD3'',\n''SBD4'',''SBD5'',''SBD6'',''SBDAL'',''SBDB'',''SBDCE'',''SBDGB'',''SBDMM'',''SBDS'',''SBDTM'',''SBLC'',''SBLCB'',\n''SBLCI'',''SBLCM'',''SBLCY'',''SIF'',''SPENG'',''STL'',''STLAD'',''STLCP'',''STLFC'',''STLL'',''STLLI'',''STLWD'',\n''SUNPH'',''SUPL'',''SUPP'',''TATA'',''TCD'',''TREDS'',''VAPIP'',''WCCLI'',''WCDL'',''WCDL2'',''WCDLA'',''WCDLD'',''WCDLM''))\nand DATE(TXN_DATE)=''',pipeline().parameters.partitionValue,'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_NeftRtgs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_RTGS",
								"type": "DatasetReference",
								"parameters": {
									"partitiondate": {
										"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
										"type": "Expression"
									},
									"RtgsTable": "RTGS_INWARD_PAYMENT",
									"loaddate": {
										"value": "@replace(pipeline().parameters.loadDate, '-', '')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "CHECK_PARTITION_EXISTS_RTGS_INWARD_PAYMENT",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Partition_Exists_Delete_Activity_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.loadDate, '-', '')",
									"type": "Expression"
								},
								"date2runm1": {
									"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
									"type": "Expression"
								},
								"Blob_File_path": {
									"value": "@variables('Blob_File_Path_RTGS_INWARD_PAYMENT')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CHECK_LOAD_DATE_EXISTS_RTGS_OUTWARD_PAYMENT",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RTGS_INWARD_PAYMENT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Check_Blob_Partition_Exists_Delete_Activity_Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@replace(pipeline().parameters.loadDate, '-', '')",
									"type": "Expression"
								},
								"date2runm1": {
									"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
									"type": "Expression"
								},
								"Blob_File_path": {
									"value": "@variables('Blob_File_Path_RTGS_OUTWARD_PAYMENT')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "RTGS_OUTWARD_PAYMENT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CHECK_LOAD_DATE_EXISTS_RTGS_OUTWARD_PAYMENT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SybaseSource",
								"query": {
									"value": "@concat('select UTR, c.tran_id,\nDATEFORMAT(c.tran_date, ''yyyyMMdd'') AS tran_date,\ntran_amt,ORD_PARTY_ACCT,\nORD_PARTY_NAME, ORD_PARTY_ADDR1,\nORD_PARTY_ADDR2,ORD_PARTY_ADDR3,\nRECEIVER_BIC,BENEF_PARTY_ACCT,\nBENEF_PARTY_NAME, BENEF_PARTY_ADDR1,\nBENEF_PARTY_ADDR2,BENEF_PARTY_ADDR3\nfrom STG.STG_FINACLE_PORH a,\nSTG.STG_FINACLE_PORD b,\nSTG.STG_FINACLE_SMH c\nwhere a.pymt_ref_num =  b.pymt_ref_num\nand a.pymt_ref_num = ROUTING_REF_NUM\nand c.IN_OUT_IND = ''O''\nand PAYSYS_ID = ''RTGS''\nand DATEFORMAT(execution_date, ''yyyy-MM-dd'') = ''',pipeline().parameters.partitionValue,'''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 300000,
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SybaseDataset_NeftRtgs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_RTGS",
								"type": "DatasetReference",
								"parameters": {
									"partitiondate": {
										"value": "@replace(pipeline().parameters.partitionValue, '-', '')",
										"type": "Expression"
									},
									"RtgsTable": "RTGS_OUTWARD_PAYMENT",
									"loaddate": {
										"value": "@replace(pipeline().parameters.loadDate, '-', '')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"partitionValue": {
						"type": "string",
						"defaultValue": "yyyy-mm-dd"
					},
					"loadDate": {
						"type": "string",
						"defaultValue": "yyyy-mm-dd"
					}
				},
				"variables": {
					"Blob_File_Path_RTGS_INWARD_PAYMENT": {
						"type": "String",
						"defaultValue": "RTGS/RTGS_INWARD_PAYMENT/load_date="
					},
					"Blob_File_Path_RTGS_OUTWARD_PAYMENT": {
						"type": "String",
						"defaultValue": "RTGS/RTGS_OUTWARD_PAYMENT/load_date="
					}
				},
				"folder": {
					"name": "stg2landing_NeftRtgs"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-09T13:54:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SybaseDataset_NeftRtgs')]",
				"[concat(variables('factoryId'), '/datasets/csv_RTGS')]",
				"[concat(variables('factoryId'), '/pipelines/Check_Blob_Partition_Exists_Delete_Activity_Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage2landing_KramModel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "KRAM_BROKER_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_BROKER_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_BROKER_MODEL"
							}
						}
					},
					{
						"name": "KRAM_LARGE_CORPORATE_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "KRAM_BROKER_MODEL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_LARGE_CORPORATE_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_LARGE_CORPORATE_MODEL"
							}
						}
					},
					{
						"name": "KRAM_SE_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "KRAM_REAL_ESTATE_DEVELOPER_MODEL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_SE_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_SE_MODEL"
							}
						}
					},
					{
						"name": "KRAM_NBFC_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "KRAM_LARGE_CORPORATE_MODEL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_NBFC_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_NBFC_MODEL"
							}
						}
					},
					{
						"name": "KRAM_REAL_ESTATE_DEVELOPER_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_REAL_ESTATE_DEVELOPER_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_REAL_ESTATE_DEVELOPER_MODEL"
							}
						}
					},
					{
						"name": "KRAM_SERVICES_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "KRAM_SE_MODEL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_SERVICES_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_SERVICES_MODEL"
							}
						}
					},
					{
						"name": "KRAM_TRADER_MODEL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "KRAM_SERVICES_MODEL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stag2landing_KRAM_TRADER_MODEL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"date2run": {
									"value": "@pipeline().parameters.load_date",
									"type": "Expression"
								},
								"table": "KRAM_TRADER_MODEL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "stag2landing_deriveddatasets"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-23T06:42:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_BROKER_MODEL')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_LARGE_CORPORATE_MODEL')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_SE_MODEL')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_NBFC_MODEL')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_REAL_ESTATE_DEVELOPER_MODEL')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_SERVICES_MODEL')]",
				"[concat(variables('factoryId'), '/pipelines/stag2landing_KRAM_TRADER_MODEL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testTrigger1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test-trigger",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "testTrigger1",
							"body": {
								"division": "consumer"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "ufce_prod_fa",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DEV/Alerts-UFCE"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-06T12:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ufce_prod_fa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql_public_get_ufce_master_for_download')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql_ufce",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "workflow_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "crn",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lob",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "segment",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "year",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "yq",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cp_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "borrower_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "division",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "location",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "region",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "zone",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "credit_analyst",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "rm",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "applicability_status",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "reason_not_appli",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "certificate_type",
						"type": "USER-DEFINED",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "self_cert_expected",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "domestic_cert_expected",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "auditor_cert_expected",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "auditor_cert_due_date",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ebid",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ebid_type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_fb_os_rel_provision",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "pan_india_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_fb_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_non_fb_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "data_status",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "currency",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "fx_payables_os",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "fx_loan_os",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "fx_receivables_os",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "hed_amt_pay_loan_liab",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "hed_amt_receivables",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "net_fce_sl_pos",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "net_ufce_sl_pos",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ratio_net_unhed",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "likely_loss",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ebid_considered",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ebid_source",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ratio_ll_ebid_con",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "risk_category",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ufce_source",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "remarks",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_kmbl_lead_bk",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_limit_with_bk_sys",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ufce_maturing_5yr",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provision_applicable",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provision_indicator",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provision_amount",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "crilic_exp",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "glems_exp",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "kmbl_sys_fund_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "kmbl_sys_nonfund_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "final_os_for_prov",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cms",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "mtm_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "bullion_os",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lcbd",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "sblc",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "odfd",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "gift_city",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "asm",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "tsm",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "acm",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_cases_checked",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "final_provision_perct",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "final_provision_amt",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "assigned_to",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "comment",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "auditor_cert_period",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "approach",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "nature_of_business",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "approach_change_approval",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ebid_date",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "auditor_cert_received",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "state",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "final_bk_sys_limit_gr25",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "assigned_on",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provision_applicable_self_cert",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "provision_applicable_bk_limit_rate",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "borrower_email",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "penalty_bucket",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "penalty_amount",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "balance_sheet_disclosure_expected",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_penalty",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "difference",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "srm",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cm",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "bh",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "extra-column-1",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "extra-column-2",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "extra-column-3",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ciib_comments",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "ca_comments",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cmt_comments",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_deleted",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cmt_checker_comments",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "createdAt",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updatedAt",
						"type": "timestamp with time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "ufce_master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql_ufce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Check_Blob_Load_date_wise_Delete_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string"
					},
					"Load_date_blob_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().Load_date_blob_path,dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PARTY_ID",
						"type": "String"
					},
					{
						"name": "SEARCH_KEY",
						"type": "String"
					},
					{
						"name": "PARTY_TYPE_LU",
						"type": "String"
					},
					{
						"name": "PARTY_TYPE_LU_CODE1",
						"type": "String"
					},
					{
						"name": "SHORT_NAME",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "MIDDLE_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "TITLE_LU",
						"type": "String"
					},
					{
						"name": "TITLE_LU_CODE1",
						"type": "String"
					},
					{
						"name": "SHAREHOLDER_FLAG",
						"type": "String"
					},
					{
						"name": "ACTIVE_YN",
						"type": "String"
					},
					{
						"name": "GROUP_ID",
						"type": "String"
					},
					{
						"name": "EMPLOYEE_FLAG",
						"type": "String"
					},
					{
						"name": "BLACK_LISTED_FLAG",
						"type": "String"
					},
					{
						"name": "DEDUP_KEY",
						"type": "String"
					},
					{
						"name": "CLASSIFICATION_CAT_LU",
						"type": "String"
					},
					{
						"name": "CLASSIFICATION_CAT_LU_CODE1",
						"type": "String"
					},
					{
						"name": "PARTY_IC",
						"type": "String"
					},
					{
						"name": "PREF_INTERACT_LANG_LU",
						"type": "String"
					},
					{
						"name": "PREF_INTERACT_LANG_LU_CODE1",
						"type": "String"
					},
					{
						"name": "HOME_BRANCH_LU",
						"type": "String"
					},
					{
						"name": "HOME_BRANCH_LU_CODE1",
						"type": "String"
					},
					{
						"name": "AUTHZ_BY",
						"type": "String"
					},
					{
						"name": "AUTHZ_DT",
						"type": "String"
					},
					{
						"name": "CREATED_BY",
						"type": "String"
					},
					{
						"name": "CREATED_DATE",
						"type": "String"
					},
					{
						"name": "MODIFIED_BY",
						"type": "String"
					},
					{
						"name": "MODIFIED_DATE",
						"type": "String"
					},
					{
						"name": "ACCESS_LEVEL",
						"type": "String"
					},
					{
						"name": "EMPLOYEE_CODE",
						"type": "String"
					},
					{
						"name": "COMPANY_LU",
						"type": "String"
					},
					{
						"name": "COMPANY_LU_CODE1",
						"type": "String"
					},
					{
						"name": "FAMILY_ID",
						"type": "String"
					},
					{
						"name": "SUB_CLASSIFICATION_CAT_LU_CODE",
						"type": "String"
					},
					{
						"name": "HOME_BRANCH_EFF_DATE",
						"type": "String"
					},
					{
						"name": "SUB_CLASSIFICATION_CAT_LU",
						"type": "String"
					},
					{
						"name": "CLASSIFICATION_EFF_DATE",
						"type": "String"
					},
					{
						"name": "UIN_STATUS_LU",
						"type": "String"
					},
					{
						"name": "UIN_STATUS_LU_CODE1",
						"type": "String"
					},
					{
						"name": "PRIMARY_SEGMENT",
						"type": "String"
					},
					{
						"name": "UIN_NO",
						"type": "String"
					},
					{
						"name": "RISK_PROFILE_LU",
						"type": "String"
					},
					{
						"name": "RISK_PROFILE_LU_CODE1",
						"type": "String"
					},
					{
						"name": "RISK_PROFILE_EFF_DATE",
						"type": "String"
					},
					{
						"name": "ETL_CREATED_BY",
						"type": "String"
					},
					{
						"name": "ETL_CREATED_TIME",
						"type": "String"
					},
					{
						"name": "ETL_LAST_UPDATED_BY",
						"type": "String"
					},
					{
						"name": "ETL_LAST_UPDATED_TIME",
						"type": "String"
					},
					{
						"name": "ETL_CHANGE_FLAG",
						"type": "String"
					},
					{
						"name": "WF_AUDIT_ID",
						"type": "String"
					},
					{
						"name": "load_date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonGeneralized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Adjusted_Tangible_Net_Worth_ATNW_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Adjusted_Tangible_Net_Worth_ATNW.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_ADJUSTED_TANGIBLE_NET_WORTH_ATNM/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Creditors_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Creditors.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_CREDITORS/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Debtors_For_Current_Receivables_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Debtors_For_Current_Receivables.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_DEBTORS_FOR_CURRENT_RECEIVABLES/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Debtors_For_Receivables_More_Than_6M_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DEBTORS_FOR_RECEIVABLES_MORE_THAN_6M.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_DEBTORS_FOR_RECEIVABLES_MORE_THAN_6M/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Group_BY_Companies_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Group_by_companies.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_GROUP_BY_COMPANIES/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Investment_And_Advances_To_Group_Companies_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "INVESTMENT_AND_ADVANCES_TO_GROUP_COMPANIES.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_INVESTMENT_AND_ADVANCES_TO_GROUP_COMPANIES/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Networth_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Networth.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_NETWORTH/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Blob_Turnover_Query_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Turnover.csv",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_COMMERCIAL_FINANCIAL_TURNOVER/load_date=',dataset().load_date)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Adjusted_Tangible_Net_Worth_ATNW_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Creditors_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Debtors_For_Current_Receivables_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Debtors_For_Receivables_More_Than_6M_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Group_By_Companies_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Investment_And_Advances_To_Group_Companies_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Networth_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOS_Commercial_Financial_Sybase_Turnover_Query_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_BCIF_PARTY_IT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_INWARD_CHEQUE_RETURN_REPORT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_KRAM_FINANCIAL_RATIOS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_LOS_BL_FINANCIAL_RATIOS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_LOS_HL_LP_RH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_LOS_WC_FINANCIAL_RATIOS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_NeftRtgs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_RP_INPUT_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_STG_FINACLE_HTD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_FINACLE_HTD\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseDataset_STG_IDB_VW_DIM_ACCTS_ARCHIVE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sybase"
				},
				"annotations": [],
				"type": "SybaseTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"STG\".\"STG_IDB_VW_DIM_ACCTS_ARCHIVE\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_entity_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					},
					"entityName": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('entity_store/', dataset().entityName, '/p_date=', dataset().partitionValue)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_landing_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"load_date": {
						"type": "string"
					},
					"jobSubjectArea": {
						"type": "string"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().jobSubjectArea,'/load_date=',replace(dataset().load_date, '-', ''))",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_profile_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					},
					"subjectArea": {
						"type": "string"
					},
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('profiles/', dataset().subjectArea,'/', dataset().subjectArea, '_profile', '/p_date=', dataset().partitionValue)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_ufce_audit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ufce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "ufce-audit"
					},
					"division": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"quarter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().division, '/', dataset().year, '_', dataset().quarter)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ufce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_ufce_dwh')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ufce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "ufce-dwh"
					},
					"division": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"quarter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().division, '/', dataset().year, '_', dataset().quarter)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ufce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "may_15",
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"encodingName": "UTF-8"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_json_exp_filter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "job-data"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "global_filter_config_details.json",
						"folderPath": "source_data/global_filter_config_details",
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"encodingName": "UTF-8"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/check_blob_files_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"date2runm1": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"Blob_File_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().Blob_File_path,dataset().date2run,'/partition_date=',dataset().date2runm1)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PARTY_ID",
						"type": "String"
					},
					{
						"name": "SEARCH_KEY",
						"type": "String"
					},
					{
						"name": "PARTY_TYPE_LU",
						"type": "String"
					},
					{
						"name": "PARTY_TYPE_LU_CODE1",
						"type": "String"
					},
					{
						"name": "SHORT_NAME",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "MIDDLE_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "TITLE_LU",
						"type": "String"
					},
					{
						"name": "TITLE_LU_CODE1",
						"type": "String"
					},
					{
						"name": "SHAREHOLDER_FLAG",
						"type": "String"
					},
					{
						"name": "ACTIVE_YN",
						"type": "String"
					},
					{
						"name": "GROUP_ID",
						"type": "String"
					},
					{
						"name": "EMPLOYEE_FLAG",
						"type": "String"
					},
					{
						"name": "BLACK_LISTED_FLAG",
						"type": "String"
					},
					{
						"name": "DEDUP_KEY",
						"type": "String"
					},
					{
						"name": "CLASSIFICATION_CAT_LU",
						"type": "String"
					},
					{
						"name": "CLASSIFICATION_CAT_LU_CODE1",
						"type": "String"
					},
					{
						"name": "PARTY_IC",
						"type": "String"
					},
					{
						"name": "PREF_INTERACT_LANG_LU",
						"type": "String"
					},
					{
						"name": "PREF_INTERACT_LANG_LU_CODE1",
						"type": "String"
					},
					{
						"name": "HOME_BRANCH_LU",
						"type": "String"
					},
					{
						"name": "HOME_BRANCH_LU_CODE1",
						"type": "String"
					},
					{
						"name": "AUTHZ_BY",
						"type": "String"
					},
					{
						"name": "AUTHZ_DT",
						"type": "String"
					},
					{
						"name": "CREATED_BY",
						"type": "String"
					},
					{
						"name": "CREATED_DATE",
						"type": "String"
					},
					{
						"name": "MODIFIED_BY",
						"type": "String"
					},
					{
						"name": "MODIFIED_DATE",
						"type": "String"
					},
					{
						"name": "ACCESS_LEVEL",
						"type": "String"
					},
					{
						"name": "EMPLOYEE_CODE",
						"type": "String"
					},
					{
						"name": "COMPANY_LU",
						"type": "String"
					},
					{
						"name": "COMPANY_LU_CODE1",
						"type": "String"
					},
					{
						"name": "FAMILY_ID",
						"type": "String"
					},
					{
						"name": "SUB_CLASSIFICATION_CAT_LU_CODE",
						"type": "String"
					},
					{
						"name": "HOME_BRANCH_EFF_DATE",
						"type": "String"
					},
					{
						"name": "SUB_CLASSIFICATION_CAT_LU",
						"type": "String"
					},
					{
						"name": "CLASSIFICATION_EFF_DATE",
						"type": "String"
					},
					{
						"name": "UIN_STATUS_LU",
						"type": "String"
					},
					{
						"name": "UIN_STATUS_LU_CODE1",
						"type": "String"
					},
					{
						"name": "PRIMARY_SEGMENT",
						"type": "String"
					},
					{
						"name": "UIN_NO",
						"type": "String"
					},
					{
						"name": "RISK_PROFILE_LU",
						"type": "String"
					},
					{
						"name": "RISK_PROFILE_LU_CODE1",
						"type": "String"
					},
					{
						"name": "RISK_PROFILE_EFF_DATE",
						"type": "String"
					},
					{
						"name": "ETL_CREATED_BY",
						"type": "String"
					},
					{
						"name": "ETL_CREATED_TIME",
						"type": "String"
					},
					{
						"name": "ETL_LAST_UPDATED_BY",
						"type": "String"
					},
					{
						"name": "ETL_LAST_UPDATED_TIME",
						"type": "String"
					},
					{
						"name": "ETL_CHANGE_FLAG",
						"type": "String"
					},
					{
						"name": "WF_AUDIT_ID",
						"type": "String"
					},
					{
						"name": "load_date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmos_db_entity_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbMongoDbEntityStore",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "crn_rm_cm_cmt_mapping_table"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD/AlertWorkflow"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbMongoDbEntityStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmos_db_feedback_profile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbMongoDbFeedBackProfile",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "cadence_datasets/PROD/AlertWorkflow"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": "ews_feedback_profile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbMongoDbFeedBackProfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmos_db_global_filter_config')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbMongoDbLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": "global_filter_config_details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbMongoDbLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmos_db_trigger_config')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbMongoDbLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": "trigger_config_details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbMongoDbLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_KRAM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/KRAM_FINANCIAL_RATIOS/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_KRAM_Models')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/',dataset().table,'/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_LOS_BL_CONSUMER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_BL_CONSUMER/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_LOS_BL_FR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_BL_FINANCIAL_RATIOS/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_LOS_HL_LP_RH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_HL_LP_RH/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_LOS_WC_FR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/LOS_WC_FINANCIAL_RATIOS/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_Derived_rpinput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('DERIVED_DATASETS/RP_INPUT_TABLE/load_date=',dataset().date2run)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_INWARD_CHEQUE_RETURN_REPORT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('INWARD_CHEQUE_RETURN_REPORT/load_date=',replace(dataset().partitionValue,'-', ''),'/partition_date=',replace(startOfMonth(subtractFromTime(dataset().partitionValue, 1, 'MONTH'),'yyyy-MM-dd'),'-',''))",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_NEFT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitiondate": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"NeftTable": {
						"type": "string"
					},
					"loaddate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('NEFT/',dataset().NeftTable,'/load_date=',dataset().loaddate,'/partition_date=',dataset().partitiondate)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_RTGS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitiondate": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"RtgsTable": {
						"type": "string"
					},
					"loaddate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('RTGS/',dataset().RtgsTable,'/load_date=',dataset().loaddate,'/partition_date=',dataset().partitiondate)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_STG_FINACLE_HTD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date2run": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					},
					"date2runm1": {
						"type": "string",
						"defaultValue": "yyyyMMdd"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('FINACLE/STG.STG_FINACLE_HTD/load_date=',dataset().date2run,'/partition_date=',dataset().date2runm1)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('MISYS/STG_GLDSRC_MISYS_VIEW_KMB_BG_INVOK_OS/load_date=',dataset().partitionValue)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('MISYS/STG_GLDSRC_MISYS_VIEW_KMB_LC_DEVELOP_REPORT/load_date=',dataset().partitionValue)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_STG_IDB_VW_DIM_ACCTS_ARCHIVE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SybaseToAdls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"partitionValue": {
						"type": "string"
					}
				},
				"folder": {
					"name": "adls"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('NPA_DATA/STG.STG_IDB_VW_DIM_ACCTS_ARCHIVE/load_date=',dataset().partitionValue)",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SybaseToAdls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/feedback_state_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cadenceAdlsLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"partitionValue": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('alert_workflow/feedback_status_stage_one','/p_date=', dataset().partitionValue)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/cadenceAdlsLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synapse_store')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CadenceSynapseLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"entityName": {
						"type": "string"
					},
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"folder": {
					"name": "cadence_datasets/PROD"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().entityName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CadenceSynapseLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ufce_download')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ufce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "ufce-download"
					},
					"division": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"quarter": {
						"type": "string"
					},
					"file_created_time": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().division, '/', dataset().year, '_', dataset().quarter, '/download_date=', dataset().file_created_time)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ufce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ufce_download_intermediate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ufce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "ufce-download-intermediate"
					},
					"division": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"quarter": {
						"type": "string"
					},
					"file_created_time": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().division, '_', dataset().year, '_', dataset().quarter, '_', dataset().file_created_time, '.txt')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(dataset().division, '/', dataset().year, '_', dataset().quarter, '/download_date=', dataset().file_created_time)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ufce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ufce_to_get_download_file_path')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ufce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "ufce-download"
					},
					"division": {
						"type": "string"
					},
					"year": {
						"type": "string"
					},
					"quarter": {
						"type": "string"
					},
					"file_created_time": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().division, '/', dataset().year, '_', dataset().quarter, '/download_date=', dataset().file_created_time)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ufce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorageLS_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_ufce')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_ufce_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragenew111')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStoragenew111_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_ufce')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_ufce_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_ufce_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql_ufce')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('AzurePostgreSql_ufce_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CadenceSynapseLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('CadenceSynapseLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbMongoDbEntityStore')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbMongoDbEntityStore_connectionString')]",
					"account": {
						"type": "SecureString",
						"value": "[parameters('CosmosDbMongoDbEntityStore_account')]"
					},
					"database": "[parameters('CosmosDbMongoDbEntityStore_properties_typeProperties_database')]",
					"isServerVersionAbove32": true
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbMongoDbFeedBackProfile')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbMongoDbFeedBackProfile_connectionString')]",
					"account": {
						"type": "SecureString",
						"value": "[parameters('CosmosDbMongoDbFeedBackProfile_account')]"
					},
					"database": "[parameters('CosmosDbMongoDbFeedBackProfile_properties_typeProperties_database')]",
					"isServerVersionAbove32": true
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbMongoDbLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbMongoDbLS_connectionString')]",
					"account": {
						"type": "SecureString",
						"value": "[parameters('CosmosDbMongoDbLS_account')]"
					},
					"database": "[parameters('CosmosDbMongoDbLS_properties_typeProperties_database')]",
					"isServerVersionAbove32": true
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sybase",
				"typeProperties": {
					"server": "[parameters('SybaseLS_properties_typeProperties_server')]",
					"database": "[parameters('SybaseLS_properties_typeProperties_database')]",
					"authenticationType": "Basic",
					"username": "[parameters('SybaseLS_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SybaseLS_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SybaseToAdls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('SybaseToAdls_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('TestLinkedService_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cadenceAdlsLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('cadenceAdlsLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('cadenceAdlsLS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cadenceProcessingLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"nodeType": {
						"type": "string"
					},
					"workers": {
						"type": "string"
					},
					"clusterVersion": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-2060517074572725.5.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('cadenceProcessingLS_accessToken')]"
					},
					"newClusterNodeType": "@linkedService().nodeType",
					"newClusterNumOfWorker": "@linkedService().workers",
					"newClusterSparkConf": {
						"spark.hadoop.fs.azure.account.key.kmblewsproddatalake.blob.core.windows.net": "cpIvm6ShLnWXMp5jGrKXEQefZihzUxxtLT1TRSXndEfQxbKhNxTvJsM22g18XmDeEz11QQMNuh+q+AStRMQ2xA==",
						"spark.hadoop.fs.azure.account.key.kmblewsproddatalake.dfs.core.windows.net": "cpIvm6ShLnWXMp5jGrKXEQefZihzUxxtLT1TRSXndEfQxbKhNxTvJsM22g18XmDeEz11QQMNuh+q+AStRMQ2xA=="
					},
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "@linkedService().clusterVersion",
					"clusterOption": "Fixed",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ewscadenceLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ewscadenceLS_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ewscadenceLS_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ufce_prod_fa')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ufce_prod_fa_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ufce_prod_fa_functionKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "consumer-commercial-email-trigger1",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "consumer-commercial-email-trigger5",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-03-08T06:00:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/consumer-commercial-email-trigger1')]",
				"[concat(variables('factoryId'), '/pipelines/consumer-commercial-email-trigger5')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"selfContainedInteractiveAuthoringEnabled": false
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenTriggerFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adls_profile_store",
								"type": "DatasetReference"
							},
							"name": "ewsTrigger",
							"description": "Import data from adls_profile_store_uat"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "feedback_state_store",
								"type": "DatasetReference"
							},
							"name": "loadAdls",
							"description": "Export data to feedback_state_store"
						}
					],
					"transformations": [
						{
							"name": "deriveStatus",
							"description": "Creating/updating the columns 'TRIGGER_UNIQUE_ID, ROW_ID, CRN_ID, CP_ID, LOB, CUSTOMER_NAME, INDUSTRY, ADDRESS, CITY, STATE, CM_NAME, RM_NAME, TRIGGER_DATE, TRIGGER_USECASE, TRIGGER_NAME, TRIGGER_ID, TRIGGER_COUNT, VERTICAL, CRN_LOB_KEY, _created_ts, _state, _created_by, _feedback_id, _p_date'"
						}
					],
					"scriptLines": [
						"parameters{",
						"     partitionValue as string",
						"}",
						"source(output(",
						"          TRIGGER_UNIQUE_ID as string,",
						"          ROW_ID as string,",
						"          CRN_ID as string,",
						"          CP_ID as string,",
						"          LOB as string,",
						"          CUSTOMER_NAME as string,",
						"          INDUSTRY as string,",
						"          ADDRESS as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          CM_NAME as string,",
						"          RM_NAME as string,",
						"          TRIGGER_DATE as timestamp,",
						"          TRIGGER_USECASE as string,",
						"          TRIGGER_NAME as string,",
						"          TRIGGER_ID as string,",
						"          TRIGGER_COUNT as integer,",
						"          VERTICAL as string,",
						"          CRN_LOB_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ewsTrigger",
						"ewsTrigger derive({_created_ts} = fromUTC(currentUTC(), 'IST'),",
						"          {_state} = iif( VERTICAL === 'WBG','Non Suspicious','Open'),",
						"          {_created_by} = 'EWS',",
						"          {_feedback_id} = uuid(),",
						"          {_p_date} = $partitionValue) ~> deriveStatus",
						"deriveStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          trigger_unique_id = TRIGGER_UNIQUE_ID,",
						"          created_by = {_created_by},",
						"          feedback_id = {_feedback_id},",
						"          state = {_state},",
						"          created_ts = {_created_ts},",
						"          crn = CRN_ID,",
						"          p_date = {_p_date},",
						"          row_id = ROW_ID,",
						"          vertical = VERTICAL",
						"     )) ~> loadAdls"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_profile_store')]",
				"[concat(variables('factoryId'), '/datasets/feedback_state_store')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_data_from_master_for_download_file')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzurePostgreSql_public_get_ufce_master_for_download",
								"type": "DatasetReference"
							},
							"name": "UfceMasterSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ufce_download",
								"type": "DatasetReference"
							},
							"name": "UfceDownloaded"
						}
					],
					"transformations": [
						{
							"name": "FilterData"
						},
						{
							"name": "DeriveColumn"
						},
						{
							"name": "selectColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     division as string,",
						"     year as string,",
						"     quarter as string,",
						"     file_creation_time as string",
						"}",
						"source(output(",
						"          workflow_id as long,",
						"          crn as string,",
						"          lob as string,",
						"          segment as string,",
						"          year as integer,",
						"          quarter as string,",
						"          yq as string,",
						"          cp_id as string,",
						"          borrower_name as string,",
						"          division as string,",
						"          location as string,",
						"          region as string,",
						"          zone as string,",
						"          credit_analyst as string,",
						"          rm as string,",
						"          applicability_status as string,",
						"          reason_not_appli as string,",
						"          certificate_type as string,",
						"          self_cert_expected as boolean,",
						"          domestic_cert_expected as boolean,",
						"          auditor_cert_expected as boolean,",
						"          auditor_cert_due_date as string,",
						"          ebid as string,",
						"          ebid_type as string,",
						"          total_fb_os_rel_provision as double,",
						"          pan_india_os as double,",
						"          total_fb_os as double,",
						"          total_non_fb_os as double,",
						"          data_status as string,",
						"          currency as string,",
						"          fx_payables_os as string,",
						"          fx_loan_os as string,",
						"          fx_receivables_os as string,",
						"          hed_amt_pay_loan_liab as string,",
						"          hed_amt_receivables as string,",
						"          net_fce_sl_pos as double,",
						"          net_ufce_sl_pos as double,",
						"          ratio_net_unhed as double,",
						"          likely_loss as double,",
						"          ebid_considered as string,",
						"          ebid_source as string,",
						"          ratio_ll_ebid_con as double,",
						"          risk_category as string,",
						"          ufce_source as string,",
						"          remarks as string,",
						"          is_kmbl_lead_bk as string,",
						"          is_limit_with_bk_sys as string,",
						"          ufce_maturing_5yr as double,",
						"          provision_applicable as double,",
						"          provision_indicator as double,",
						"          provision_amount as double,",
						"          crilic_exp as string,",
						"          glems_exp as string,",
						"          kmbl_sys_fund_os as double,",
						"          kmbl_sys_nonfund_os as double,",
						"          final_os_for_prov as double,",
						"          cms as double,",
						"          mtm_os as double,",
						"          bullion_os as double,",
						"          lcbd as double,",
						"          sblc as double,",
						"          odfd as double,",
						"          gift_city as string,",
						"          asm as string,",
						"          tsm as string,",
						"          acm as string,",
						"          is_cases_checked as boolean,",
						"          final_provision_perct as double,",
						"          final_provision_amt as double,",
						"          status as string,",
						"          assigned_to as string,",
						"          comment as string,",
						"          auditor_cert_period as string,",
						"          approach as string,",
						"          nature_of_business as string,",
						"          approach_change_approval as string,",
						"          ebid_date as string,",
						"          auditor_cert_received as string,",
						"          state as string,",
						"          final_bk_sys_limit_gr25 as boolean,",
						"          assigned_on as string,",
						"          provision_applicable_self_cert as double,",
						"          provision_applicable_bk_limit_rate as double,",
						"          borrower_email as string,",
						"          penalty_bucket as double,",
						"          penalty_amount as double,",
						"          balance_sheet_disclosure_expected as boolean,",
						"          total_penalty as double,",
						"          difference as double,",
						"          srm as string,",
						"          cm as string,",
						"          bh as string,",
						"          {extra-column-1} as string,",
						"          {extra-column-2} as string,",
						"          {extra-column-3} as string,",
						"          ciib_comments as string,",
						"          ca_comments as string,",
						"          cmt_comments as string,",
						"          is_deleted as boolean,",
						"          cmt_checker_comments as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT * from public.ufce_master\"),",
						"     format: 'query') ~> UfceMasterSource",
						"UfceMasterSource filter(division == $division && toString(year) == $year && quarter == $quarter) ~> FilterData",
						"FilterData derive(crn = toString(toDecimal(crn, 38, 0)),",
						"          cp_id = toString(toDecimal(cp_id, 38, 0)),",
						"          fx_payables_os = iif(fx_payables_os == '0' || fx_payables_os == '0.0' || fx_payables_os == '0.00' || fx_payables_os == '0.000', toString(fx_payables_os), iif(isDecimal(fx_payables_os) == true(), toString(toDecimal(fx_payables_os, 38, 20)), toString(fx_payables_os))),",
						"          fx_loan_os = iif(fx_loan_os == '0' || fx_loan_os == '0.0' || fx_loan_os == '0.00' || fx_loan_os == '0.000', toString(fx_loan_os), iif(isDecimal(fx_loan_os) == true(), toString(toDecimal(fx_loan_os, 38, 20)), toString(fx_loan_os))),",
						"          fx_receivables_os = iif(fx_receivables_os == '0'|| fx_receivables_os == '0.0' || fx_receivables_os == '0.00' || fx_receivables_os == '0.000', toString(fx_receivables_os), iif(isDecimal(fx_receivables_os) == true(), toString(toDecimal(fx_receivables_os, 38, 20)), toString(fx_receivables_os))),",
						"          hed_amt_pay_loan_liab = iif(hed_amt_pay_loan_liab == '0' || hed_amt_pay_loan_liab == '0.0' || hed_amt_pay_loan_liab == '0.00' || hed_amt_pay_loan_liab == '0.000', toString(hed_amt_pay_loan_liab), iif(isDecimal(hed_amt_pay_loan_liab) == true(), toString(toDecimal(hed_amt_pay_loan_liab, 38, 20)), toString(hed_amt_pay_loan_liab))),",
						"          hed_amt_receivables = iif(hed_amt_receivables == '0' || hed_amt_receivables == '0.0' || hed_amt_receivables == '0.00' || hed_amt_receivables == '0.000', toString(hed_amt_receivables), iif(isDecimal(hed_amt_receivables) == true(), toString(toDecimal(hed_amt_receivables, 38, 20)), toString(hed_amt_receivables))),",
						"          net_fce_sl_pos = iif(net_fce_sl_pos == 0 || net_fce_sl_pos == 0.0 || net_fce_sl_pos == 0.00 || net_fce_sl_pos == 0.000, toString(net_fce_sl_pos), iif(isDouble(toString(net_fce_sl_pos)) == true(), toString(toDecimal(net_fce_sl_pos, 38, 20)), toString(net_fce_sl_pos))),",
						"          net_ufce_sl_pos = iif(net_ufce_sl_pos == 0 || net_ufce_sl_pos == 0.0 || net_ufce_sl_pos == 0.00 || net_ufce_sl_pos == 0.000, toString(net_ufce_sl_pos), iif(isDouble(toString(net_ufce_sl_pos)) == true(), toString(toDecimal(net_ufce_sl_pos, 38, 20)), toString(net_ufce_sl_pos))),",
						"          ratio_net_unhed = iif(ratio_net_unhed == 0 || ratio_net_unhed == 0.0 || ratio_net_unhed == 0.00 || ratio_net_unhed == 0.000, toString(ratio_net_unhed), iif(isDouble(toString(ratio_net_unhed)) == true(), toString(toDecimal(ratio_net_unhed, 38, 20)), toString(ratio_net_unhed))),",
						"          ufce_maturing_5yr = iif(ufce_maturing_5yr == 0 || ufce_maturing_5yr == 0.0 || ufce_maturing_5yr == 0.00 || ufce_maturing_5yr == 0.000, toString(ufce_maturing_5yr), iif(isDouble(toString(ufce_maturing_5yr)) == true(), toString(toDecimal(ufce_maturing_5yr, 38, 20)), toString(ufce_maturing_5yr))),",
						"          likely_loss = iif(likely_loss == 0 || likely_loss == 0.0 || likely_loss == 0.00 || likely_loss == 0.000, toString(likely_loss), iif(isDouble(toString(likely_loss)) == true(), toString(toDecimal(likely_loss, 38, 20)), toString(likely_loss))),",
						"          ebid_considered = iif(ebid_considered == '0' || ebid_considered == '0.0' || ebid_considered == '0.00' || ebid_considered == '0.000', toString(ebid_considered), iif(isDecimal(ebid_considered) == true(), toString(toDecimal(ebid_considered, 38, 20)), toString(ebid_considered))),",
						"          ratio_ll_ebid_con = iif(ratio_ll_ebid_con == 0 || ratio_ll_ebid_con == 0.0 || ratio_ll_ebid_con == 0.00 || ratio_ll_ebid_con == 0.000, toString(ratio_ll_ebid_con), iif(isDouble(toString(ratio_ll_ebid_con)) == true(), toString(toDecimal(ratio_ll_ebid_con, 38, 20)), toString(ratio_ll_ebid_con))),",
						"          crilic_exp = iif(crilic_exp == '0' || crilic_exp == '0.0' || crilic_exp == '0.00' || crilic_exp == '0.000', toString(crilic_exp), iif(isDecimal(crilic_exp) == true(), toString(toDecimal(crilic_exp, 38, 20)), toString(crilic_exp))),",
						"          is_limit_with_bk_sys = iif(lower(trim(is_limit_with_bk_sys)) == 'true' || lower(trim(is_limit_with_bk_sys)) == 'yes', 'Yes',iif(lower(trim(is_limit_with_bk_sys)) == 'false' || lower(trim(is_limit_with_bk_sys)) == 'no', 'No',toString(is_limit_with_bk_sys))),",
						"          glems_exp = iif(glems_exp == '0' || glems_exp == '0.0' || glems_exp == '0.00' || glems_exp == '0.000', toString(glems_exp), iif(isDecimal(glems_exp) == true(), toString(toDecimal(glems_exp, 38, 20)), toString(glems_exp))),",
						"          final_bk_sys_limit_gr25 = iif(final_bk_sys_limit_gr25 == true(), 'Yes', iif(final_bk_sys_limit_gr25 == false(), 'No', toString(final_bk_sys_limit_gr25))),",
						"          provision_applicable_self_cert = iif(provision_applicable_self_cert == 0 || provision_applicable_self_cert == 0.0 || provision_applicable_self_cert == 0.00 || provision_applicable_self_cert == 0.000, toString(provision_applicable_self_cert), iif(isDouble(toString(provision_applicable_self_cert)) == true(), toString(toDecimal(provision_applicable_self_cert, 38, 20)), toString(provision_applicable_self_cert))),",
						"          provision_indicator = iif(provision_indicator == 0 || provision_indicator == 0.0 || provision_indicator == 0.00 || provision_indicator == 0.000, toString(provision_indicator), iif(isDouble(toString(provision_indicator)) == true(), toString(toDecimal(provision_indicator, 38, 20)), toString(provision_indicator))),",
						"          provision_applicable_bk_limit_rate = iif(provision_applicable_bk_limit_rate == 0 || provision_applicable_bk_limit_rate == 0.0 || provision_applicable_bk_limit_rate == 0.00 || provision_applicable_bk_limit_rate == 0.000, toString(provision_applicable_bk_limit_rate), iif(isDouble(toString(provision_applicable_bk_limit_rate)) == true(), toString(toDecimal(provision_applicable_bk_limit_rate, 38, 20)), toString(provision_applicable_bk_limit_rate))),",
						"          difference = iif(difference == 0 || difference == 0.0 || difference == 0.00 || difference == 0.000, toString(difference), iif(isDouble(toString(difference)) == true(), toString(toDecimal(difference, 38, 20)), toString(difference))),",
						"          provision_applicable = iif(provision_applicable == 0 || provision_applicable == 0.0 || provision_applicable == 0.00 || provision_applicable == 0.000, toString(provision_applicable), iif(isDouble(toString(provision_applicable)) == true(), toString(toDecimal(provision_applicable, 38, 20)), toString(provision_applicable))),",
						"          final_os_for_prov = iif(final_os_for_prov == 0 || final_os_for_prov == 0.0 || final_os_for_prov == 0.00 || final_os_for_prov == 0.000, toString(final_os_for_prov), iif(isDouble(toString(final_os_for_prov)) == true(), toString(toDecimal(final_os_for_prov, 38, 20)), toString(final_os_for_prov))),",
						"          provision_amount = iif(provision_amount == 0 || provision_amount == 0.0 || provision_amount == 0.00 || provision_amount == 0.000, toString(provision_amount), iif(isDouble(toString(provision_amount)) == true(), toString(toDecimal(provision_amount, 38, 20)), toString(provision_amount))),",
						"          kmbl_sys_fund_os = iif(kmbl_sys_fund_os == 0 || kmbl_sys_fund_os == 0.0 || kmbl_sys_fund_os == 0.00 || kmbl_sys_fund_os == 0.000, toString(kmbl_sys_fund_os), iif(isDouble(toString(kmbl_sys_fund_os)) == true(), toString(toDecimal(kmbl_sys_fund_os, 38, 20)), toString(kmbl_sys_fund_os))),",
						"          kmbl_sys_nonfund_os = iif(kmbl_sys_nonfund_os == 0 || kmbl_sys_nonfund_os == 0.0 || kmbl_sys_nonfund_os == 0.00|| kmbl_sys_nonfund_os == 0.000, toString(kmbl_sys_nonfund_os), iif(isDouble(toString(kmbl_sys_nonfund_os)) == true(), toString(toDecimal(kmbl_sys_nonfund_os, 38, 20)), toString(kmbl_sys_nonfund_os))),",
						"          gift_city = iif(gift_city == '0' || gift_city == '0.0' || gift_city == '0.00' || gift_city == '0.000', toString(gift_city) , iif(isDecimal(gift_city) == true(), toString(toDecimal(gift_city, 38, 20)), toString(gift_city)))) ~> DeriveColumn",
						"DeriveColumn select(mapColumn(",
						"          {For the Year and Quarter} = yq,",
						"          LOB = lob,",
						"          Division = division,",
						"          Segment = segment,",
						"          {KMBL CRN} = crn,",
						"          {KMBL GLEMS CP Id} = cp_id,",
						"          {Name of Borrower} = borrower_name,",
						"          {Nature of Business} = nature_of_business,",
						"          {Applicability status} = applicability_status,",
						"          {Data status} = data_status,",
						"          {Standardized or Broad-based approach} = approach,",
						"          {Is approval taken for change in approach} = approach_change_approval,",
						"          {Fx payables outstanding} = fx_payables_os,",
						"          {Fx loan outstanding} = fx_loan_os,",
						"          {Fx receivables outstanding} = fx_receivables_os,",
						"          {Hedged amt. payables & loan liab.} = hed_amt_pay_loan_liab,",
						"          {Hedged amt. receivables} = hed_amt_receivables,",
						"          {Net FCE (short) / long position} = net_fce_sl_pos,",
						"          {Net UFCE (short) / long position} = net_ufce_sl_pos,",
						"          {Ratio of net unhedged} = ratio_net_unhed,",
						"          {UFCE maturing up to 5 years - positive/(negative)} = ufce_maturing_5yr,",
						"          {Likely loss value} = likely_loss,",
						"          {EBID (after tax)} = ebid_considered,",
						"          {EBID Date} = ebid_date,",
						"          {Likely loss / Considered EBID ratio} = ratio_ll_ebid_con,",
						"          {Risk category} = risk_category,",
						"          {Remarks (if any)} = remarks,",
						"          {Banking System Exposure (CRILC) (in lakhs)} = crilic_exp,",
						"          {Final Banking System Limits (>=25cr), as per CMT Team's input} = is_limit_with_bk_sys,",
						"          {Glems Exp} = glems_exp,",
						"          {Final Banking System Limits (>25cr)} = final_bk_sys_limit_gr25,",
						"          {UFCE Data source(If received) whether self- certified or auditor certified} = ufce_source,",
						"          {Auditor Certificate Received (Yes/ No/ NA)} = auditor_cert_received,",
						"          {Auditor Certificate Due Date} = auditor_cert_due_date,",
						"          {Period for which Auditor Certificate is received} = auditor_cert_period,",
						"          Comments = comment,",
						"          {Prov.% Applicable- Basis Self Certificate} = provision_applicable_self_cert,",
						"          {Prov. Indicator } = provision_indicator,",
						"          {Prov.% Applicable-  As per the LATEST banking limit rate (for CA Certificate)} = provision_applicable_bk_limit_rate,",
						"          Difference = difference,",
						"          {Final Prov %} = provision_applicable,",
						"          {Final OS for provision computation} = final_os_for_prov,",
						"          {Final Provision Amt} = provision_amount,",
						"          {KMBL system fund O/s} = kmbl_sys_fund_os,",
						"          {KMBL system Non fund O/s} = kmbl_sys_nonfund_os,",
						"          {Gift city} = gift_city,",
						"          Zone = zone,",
						"          State = state,",
						"          Location = location,",
						"          {Credit Analyst / Credit Manager} = credit_analyst,",
						"          ASM = asm,",
						"          TSM = tsm,",
						"          RM = rm,",
						"          ACM = acm,",
						"          {Extra Column 1} = {extra-column-1},",
						"          {Extra Column 2} = {extra-column-2},",
						"          {Extra Column 3} = {extra-column-3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumn",
						"selectColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($division, '_', $year, '_', $quarter, '_', $file_creation_time, '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     partitionBy('hash', 1)) ~> UfceDownloaded"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSql_public_get_ufce_master_for_download')]",
				"[concat(variables('factoryId'), '/datasets/ufce_download')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_data_from_master_for_download_file_test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ufce_download_intermediate",
								"type": "DatasetReference"
							},
							"name": "UfceMasterSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ufce_download",
								"type": "DatasetReference"
							},
							"name": "UfceDownloaded"
						}
					],
					"transformations": [
						{
							"name": "FilterData"
						},
						{
							"name": "DeriveColumn"
						},
						{
							"name": "selectColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     year as string,",
						"     quarter as string,",
						"     file_creation_time as string,",
						"     division as string",
						"}",
						"source(output(",
						"          workflow_id as long,",
						"          crn as string,",
						"          lob as string,",
						"          segment as string,",
						"          year as integer,",
						"          quarter as string,",
						"          yq as string,",
						"          cp_id as string,",
						"          borrower_name as string,",
						"          division as string,",
						"          location as string,",
						"          region as string,",
						"          zone as string,",
						"          credit_analyst as string,",
						"          rm as string,",
						"          applicability_status as string,",
						"          reason_not_appli as string,",
						"          certificate_type as string,",
						"          self_cert_expected as boolean,",
						"          domestic_cert_expected as boolean,",
						"          auditor_cert_expected as boolean,",
						"          auditor_cert_due_date as string,",
						"          ebid as string,",
						"          ebid_type as string,",
						"          total_fb_os_rel_provision as double,",
						"          pan_india_os as double,",
						"          total_fb_os as double,",
						"          total_non_fb_os as double,",
						"          data_status as string,",
						"          currency as string,",
						"          fx_payables_os as string,",
						"          fx_loan_os as string,",
						"          fx_receivables_os as string,",
						"          hed_amt_pay_loan_liab as string,",
						"          hed_amt_receivables as string,",
						"          net_fce_sl_pos as double,",
						"          net_ufce_sl_pos as double,",
						"          ratio_net_unhed as double,",
						"          likely_loss as double,",
						"          ebid_considered as string,",
						"          ebid_source as string,",
						"          ratio_ll_ebid_con as double,",
						"          risk_category as string,",
						"          ufce_source as string,",
						"          remarks as string,",
						"          is_kmbl_lead_bk as string,",
						"          is_limit_with_bk_sys as string,",
						"          ufce_maturing_5yr as double,",
						"          provision_applicable as double,",
						"          provision_indicator as double,",
						"          provision_amount as double,",
						"          crilic_exp as string,",
						"          glems_exp as string,",
						"          kmbl_sys_fund_os as double,",
						"          kmbl_sys_nonfund_os as double,",
						"          final_os_for_prov as double,",
						"          cms as double,",
						"          mtm_os as double,",
						"          bullion_os as double,",
						"          lcbd as double,",
						"          sblc as double,",
						"          odfd as double,",
						"          gift_city as string,",
						"          asm as string,",
						"          tsm as string,",
						"          acm as string,",
						"          is_cases_checked as boolean,",
						"          final_provision_perct as double,",
						"          final_provision_amt as double,",
						"          status as string,",
						"          assigned_to as string,",
						"          comment as string,",
						"          auditor_cert_period as string,",
						"          approach as string,",
						"          nature_of_business as string,",
						"          approach_change_approval as string,",
						"          ebid_date as string,",
						"          auditor_cert_received as string,",
						"          state as string,",
						"          final_bk_sys_limit_gr25 as boolean,",
						"          assigned_on as string,",
						"          provision_applicable_self_cert as double,",
						"          provision_applicable_bk_limit_rate as double,",
						"          borrower_email as string,",
						"          penalty_bucket as double,",
						"          penalty_amount as double,",
						"          balance_sheet_disclosure_expected as boolean,",
						"          total_penalty as double,",
						"          difference as double,",
						"          srm as string,",
						"          cm as string,",
						"          bh as string,",
						"          {extra-column-1} as string,",
						"          {extra-column-2} as string,",
						"          {extra-column-3} as string,",
						"          ciib_comments as string,",
						"          ca_comments as string,",
						"          cmt_comments as string,",
						"          is_deleted as boolean,",
						"          cmt_checker_comments as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> UfceMasterSource",
						"UfceMasterSource filter(division == $division && toString(year) == $year && quarter == $quarter) ~> FilterData",
						"FilterData derive(crn = toString(toDecimal(crn, 38, 0)),",
						"          cp_id = toString(toDecimal(cp_id, 38, 0)),",
						"          fx_payables_os = iif(fx_payables_os == '0' || fx_payables_os == '0.0' || fx_payables_os == '0.00' || fx_payables_os == '0.000', toString(fx_payables_os), iif(isDecimal(fx_payables_os) == true(), toString(toDecimal(fx_payables_os, 38, 20)), toString(fx_payables_os))),",
						"          fx_loan_os = iif(fx_loan_os == '0' || fx_loan_os == '0.0' || fx_loan_os == '0.00' || fx_loan_os == '0.000', toString(fx_loan_os), iif(isDecimal(fx_loan_os) == true(), toString(toDecimal(fx_loan_os, 38, 20)), toString(fx_loan_os))),",
						"          fx_receivables_os = iif(fx_receivables_os == '0'|| fx_receivables_os == '0.0' || fx_receivables_os == '0.00' || fx_receivables_os == '0.000', toString(fx_receivables_os), iif(isDecimal(fx_receivables_os) == true(), toString(toDecimal(fx_receivables_os, 38, 20)), toString(fx_receivables_os))),",
						"          hed_amt_pay_loan_liab = iif(hed_amt_pay_loan_liab == '0' || hed_amt_pay_loan_liab == '0.0' || hed_amt_pay_loan_liab == '0.00' || hed_amt_pay_loan_liab == '0.000', toString(hed_amt_pay_loan_liab), iif(isDecimal(hed_amt_pay_loan_liab) == true(), toString(toDecimal(hed_amt_pay_loan_liab, 38, 20)), toString(hed_amt_pay_loan_liab))),",
						"          hed_amt_receivables = iif(hed_amt_receivables == '0' || hed_amt_receivables == '0.0' || hed_amt_receivables == '0.00' || hed_amt_receivables == '0.000', toString(hed_amt_receivables), iif(isDecimal(hed_amt_receivables) == true(), toString(toDecimal(hed_amt_receivables, 38, 20)), toString(hed_amt_receivables))),",
						"          net_fce_sl_pos = iif(net_fce_sl_pos == 0 || net_fce_sl_pos == 0.0 || net_fce_sl_pos == 0.00 || net_fce_sl_pos == 0.000, toString(net_fce_sl_pos), iif(isDouble(toString(net_fce_sl_pos)) == true(), toString(toDecimal(net_fce_sl_pos, 38, 20)), toString(net_fce_sl_pos))),",
						"          net_ufce_sl_pos = iif(net_ufce_sl_pos == 0 || net_ufce_sl_pos == 0.0 || net_ufce_sl_pos == 0.00 || net_ufce_sl_pos == 0.000, toString(net_ufce_sl_pos), iif(isDouble(toString(net_ufce_sl_pos)) == true(), toString(toDecimal(net_ufce_sl_pos, 38, 20)), toString(net_ufce_sl_pos))),",
						"          ratio_net_unhed = iif(ratio_net_unhed == 0 || ratio_net_unhed == 0.0 || ratio_net_unhed == 0.00 || ratio_net_unhed == 0.000, toString(ratio_net_unhed), iif(isDouble(toString(ratio_net_unhed)) == true(), toString(toDecimal(ratio_net_unhed, 38, 20)), toString(ratio_net_unhed))),",
						"          ufce_maturing_5yr = iif(ufce_maturing_5yr == 0 || ufce_maturing_5yr == 0.0 || ufce_maturing_5yr == 0.00 || ufce_maturing_5yr == 0.000, toString(ufce_maturing_5yr), iif(isDouble(toString(ufce_maturing_5yr)) == true(), toString(toDecimal(ufce_maturing_5yr, 38, 20)), toString(ufce_maturing_5yr))),",
						"          likely_loss = iif(likely_loss == 0 || likely_loss == 0.0 || likely_loss == 0.00 || likely_loss == 0.000, toString(likely_loss), iif(isDouble(toString(likely_loss)) == true(), toString(toDecimal(likely_loss, 38, 20)), toString(likely_loss))),",
						"          ebid_considered = iif(ebid_considered == '0' || ebid_considered == '0.0' || ebid_considered == '0.00' || ebid_considered == '0.000', toString(ebid_considered), iif(isDecimal(ebid_considered) == true(), toString(toDecimal(ebid_considered, 38, 20)), toString(ebid_considered))),",
						"          ratio_ll_ebid_con = iif(ratio_ll_ebid_con == 0 || ratio_ll_ebid_con == 0.0 || ratio_ll_ebid_con == 0.00 || ratio_ll_ebid_con == 0.000, toString(ratio_ll_ebid_con), iif(isDouble(toString(ratio_ll_ebid_con)) == true(), toString(toDecimal(ratio_ll_ebid_con, 38, 20)), toString(ratio_ll_ebid_con))),",
						"          crilic_exp = iif(crilic_exp == '0' || crilic_exp == '0.0' || crilic_exp == '0.00' || crilic_exp == '0.000', toString(crilic_exp), iif(isDecimal(crilic_exp) == true(), toString(toDecimal(crilic_exp, 38, 20)), toString(crilic_exp))),",
						"          is_limit_with_bk_sys = iif(lower(trim(is_limit_with_bk_sys)) == 'true' || lower(trim(is_limit_with_bk_sys)) == 'yes', 'Yes',iif(lower(trim(is_limit_with_bk_sys)) == 'false' || lower(trim(is_limit_with_bk_sys)) == 'no', 'No',toString(is_limit_with_bk_sys))),",
						"          glems_exp = iif(glems_exp == '0' || glems_exp == '0.0' || glems_exp == '0.00' || glems_exp == '0.000', toString(glems_exp), iif(isDecimal(glems_exp) == true(), toString(toDecimal(glems_exp, 38, 20)), toString(glems_exp))),",
						"          final_bk_sys_limit_gr25 = iif(final_bk_sys_limit_gr25 == true(), 'Yes', iif(final_bk_sys_limit_gr25 == false(), 'No', toString(final_bk_sys_limit_gr25))),",
						"          provision_applicable_self_cert = iif(provision_applicable_self_cert == 0 || provision_applicable_self_cert == 0.0 || provision_applicable_self_cert == 0.00 || provision_applicable_self_cert == 0.000, toString(provision_applicable_self_cert), iif(isDouble(toString(provision_applicable_self_cert)) == true(), toString(toDecimal(provision_applicable_self_cert, 38, 20)), toString(provision_applicable_self_cert))),",
						"          provision_indicator = iif(provision_indicator == 0 || provision_indicator == 0.0 || provision_indicator == 0.00 || provision_indicator == 0.000, toString(provision_indicator), iif(isDouble(toString(provision_indicator)) == true(), toString(toDecimal(provision_indicator, 38, 20)), toString(provision_indicator))),",
						"          provision_applicable_bk_limit_rate = iif(provision_applicable_bk_limit_rate == 0 || provision_applicable_bk_limit_rate == 0.0 || provision_applicable_bk_limit_rate == 0.00 || provision_applicable_bk_limit_rate == 0.000, toString(provision_applicable_bk_limit_rate), iif(isDouble(toString(provision_applicable_bk_limit_rate)) == true(), toString(toDecimal(provision_applicable_bk_limit_rate, 38, 20)), toString(provision_applicable_bk_limit_rate))),",
						"          difference = iif(difference == 0 || difference == 0.0 || difference == 0.00 || difference == 0.000, toString(difference), iif(isDouble(toString(difference)) == true(), toString(toDecimal(difference, 38, 20)), toString(difference))),",
						"          provision_applicable = iif(provision_applicable == 0 || provision_applicable == 0.0 || provision_applicable == 0.00 || provision_applicable == 0.000, toString(provision_applicable), iif(isDouble(toString(provision_applicable)) == true(), toString(toDecimal(provision_applicable, 38, 20)), toString(provision_applicable))),",
						"          final_os_for_prov = iif(final_os_for_prov == 0 || final_os_for_prov == 0.0 || final_os_for_prov == 0.00 || final_os_for_prov == 0.000, toString(final_os_for_prov), iif(isDouble(toString(final_os_for_prov)) == true(), toString(toDecimal(final_os_for_prov, 38, 20)), toString(final_os_for_prov))),",
						"          provision_amount = iif(provision_amount == 0 || provision_amount == 0.0 || provision_amount == 0.00 || provision_amount == 0.000, toString(provision_amount), iif(isDouble(toString(provision_amount)) == true(), toString(toDecimal(provision_amount, 38, 20)), toString(provision_amount))),",
						"          kmbl_sys_fund_os = iif(kmbl_sys_fund_os == 0 || kmbl_sys_fund_os == 0.0 || kmbl_sys_fund_os == 0.00 || kmbl_sys_fund_os == 0.000, toString(kmbl_sys_fund_os), iif(isDouble(toString(kmbl_sys_fund_os)) == true(), toString(toDecimal(kmbl_sys_fund_os, 38, 20)), toString(kmbl_sys_fund_os))),",
						"          kmbl_sys_nonfund_os = iif(kmbl_sys_nonfund_os == 0 || kmbl_sys_nonfund_os == 0.0 || kmbl_sys_nonfund_os == 0.00|| kmbl_sys_nonfund_os == 0.000, toString(kmbl_sys_nonfund_os), iif(isDouble(toString(kmbl_sys_nonfund_os)) == true(), toString(toDecimal(kmbl_sys_nonfund_os, 38, 20)), toString(kmbl_sys_nonfund_os))),",
						"          gift_city = iif(gift_city == '0' || gift_city == '0.0' || gift_city == '0.00' || gift_city == '0.000', toString(gift_city) , iif(isDecimal(gift_city) == true(), toString(toDecimal(gift_city, 38, 20)), toString(gift_city)))) ~> DeriveColumn",
						"DeriveColumn select(mapColumn(",
						"          {For the Year and Quarter} = yq,",
						"          LOB = lob,",
						"          Division = division,",
						"          Segment = segment,",
						"          {KMBL CRN} = crn,",
						"          {KMBL GLEMS CP Id} = cp_id,",
						"          {Name of Borrower} = borrower_name,",
						"          {Nature of Business} = nature_of_business,",
						"          {Applicability status} = applicability_status,",
						"          {Data status} = data_status,",
						"          {Standardized or Broad-based approach} = approach,",
						"          {Is approval taken for change in approach} = approach_change_approval,",
						"          {Fx payables outstanding} = fx_payables_os,",
						"          {Fx loan outstanding} = fx_loan_os,",
						"          {Fx receivables outstanding} = fx_receivables_os,",
						"          {Hedged amt. payables & loan liab.} = hed_amt_pay_loan_liab,",
						"          {Hedged amt. receivables} = hed_amt_receivables,",
						"          {Net FCE (short) / long position} = net_fce_sl_pos,",
						"          {Net UFCE (short) / long position} = net_ufce_sl_pos,",
						"          {Ratio of net unhedged} = ratio_net_unhed,",
						"          {UFCE maturing up to 5 years - positive/(negative)} = ufce_maturing_5yr,",
						"          {Likely loss value} = likely_loss,",
						"          {EBID (after tax)} = ebid_considered,",
						"          {EBID Date} = ebid_date,",
						"          {Likely loss / Considered EBID ratio} = ratio_ll_ebid_con,",
						"          {Risk category} = risk_category,",
						"          {Remarks (if any)} = remarks,",
						"          {Banking System Exposure (CRILC) (in lakhs)} = crilic_exp,",
						"          {Final Banking System Limits (>=25cr), as per CMT Team's input} = is_limit_with_bk_sys,",
						"          {Glems Exp} = glems_exp,",
						"          {Final Banking System Limits (>25cr)} = final_bk_sys_limit_gr25,",
						"          {UFCE Data source(If received) whether self- certified or auditor certified} = ufce_source,",
						"          {Auditor Certificate Received (Yes/ No/ NA)} = auditor_cert_received,",
						"          {Auditor Certificate Due Date} = auditor_cert_due_date,",
						"          {Period for which Auditor Certificate is received} = auditor_cert_period,",
						"          Comments = comment,",
						"          {Prov.% Applicable- Basis Self Certificate} = provision_applicable_self_cert,",
						"          {Prov. Indicator } = provision_indicator,",
						"          {Prov.% Applicable-  As per the LATEST banking limit rate (for CA Certificate)} = provision_applicable_bk_limit_rate,",
						"          Difference = difference,",
						"          {Final Prov %} = provision_applicable,",
						"          {Final OS for provision computation} = final_os_for_prov,",
						"          {Final Provision Amt} = provision_amount,",
						"          {KMBL system fund O/s} = kmbl_sys_fund_os,",
						"          {KMBL system Non fund O/s} = kmbl_sys_nonfund_os,",
						"          {Gift city} = gift_city,",
						"          Zone = zone,",
						"          State = state,",
						"          Location = location,",
						"          {Credit Analyst / Credit Manager} = credit_analyst,",
						"          ASM = asm,",
						"          TSM = tsm,",
						"          RM = rm,",
						"          ACM = acm,",
						"          {Extra Column 1} = {extra-column-1},",
						"          {Extra Column 2} = {extra-column-2},",
						"          {Extra Column 3} = {extra-column-3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumn",
						"selectColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($division, '_', $year, '_', $quarter, '_', $file_creation_time, '.csv'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     partitionBy('hash', 1)) ~> UfceDownloaded"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ufce_download_intermediate')]",
				"[concat(variables('factoryId'), '/datasets/ufce_download')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage868')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage868_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage868_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureDataLakeStorage252')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureDataLakeStorage252_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureDataLakeStorage252_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureFunction541')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureFunction541_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureFunction541_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzurePostgreSql860')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzurePostgreSql860_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzurePostgreSql860_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}